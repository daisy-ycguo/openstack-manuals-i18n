<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ch_scheduling">
    <title>Scheduling</title>
    <para>Compute uses the <command>nova-scheduler</command> service to determine
how to dispatch compute and volume requests. For example, the 
<command>nova-scheduler</command> service determines which host 
a VM should launch on. The term "host" in the context of filters means a
physical node that has a <command>nova-compute</command> service running on
it. The scheduler is configurable through a variety of options.</para>
<para>Compute is configured with the following default scheduler options:
<programlisting>
scheduler_driver=nova.scheduler.multi.MultiScheduler
volume_scheduler_driver=nova.scheduler.chance.ChanceScheduler
compute_scheduler_driver=nova.scheduler.filter_scheduler.FilterScheduler
scheduler_available_filters=nova.scheduler.filters.standard_filters
scheduler_default_filters=AvailabilityZoneFilter,RamFilter,ComputeFilter
least_cost_functions=nova.scheduler.least_cost.compute_fill_first_cost_fn
compute_fill_first_cost_fn_weight=-1.0
</programlisting>

Compute is configured by default to use the Multi Scheduler, which allows the
admin to specify different scheduling behavior for compute requests versus volume
requests. 
</para>

<para>The volume scheduler is configured by default
as a Chance Scheduler, which picks a host at random that has the
<command>nova-volume</command> service running.</para>

<para>
The compute scheduler is configured by default as a Filter Scheduler, described
in detail in the next section. In the
default configuration, this scheduler will only consider hosts that are in the
requested availability
zone (<literal>AvailabilityZoneFilter</literal>), that have sufficient RAM
available (<literal>RamFilter</literal>), and that are actually capable of
servicing the request (<literal>ComputeFilter</literal>).</para>

<para> From the resulting filtered list of eligible hosts, the scheduler will
    assign a cost to each host based on the amount of free RAM
    (<literal>nova.scheduler.least_cost.compute_fill_first_cost_fn</literal>),
    will multiply each cost value by -1 (<literal>compute_fill_first_cost_fn_weight</literal>),
    and will select the host with the minimum cost. This is equivalent to
    selecting the host with the maximum amount of RAM available.
</para>

    <section xml:id="filter-scheduler">
        <title>Filter Scheduler</title>
        <para>The Filter Scheduler (<literal>nova.scheduler.filter_scheduler.FilterScheduler</literal>)
        is the default scheduler for scheduling virtual machine instances.
        It supports filtering and weighting to make informed decisions on where a new instance should be created.
            This Scheduler can only be used for scheduling compute requests,
            not volume requests, i.e. it can only be used with
            the <literal>compute_scheduler_driver</literal> configuration
            option.
        </para>
    </section>


    <section xml:id="scheduler-filters">
        <title>Filters</title>
        <para>When the Filter Scheduler receives a request for a resource, it first
            applies filters to determine which hosts are eligible for
            consideration when dispatching a resource. Filters are binary:
            either a host is accepted by the filter, or it is rejected. Hosts
            that are accepted by the filter are then processed by a different
            algorithm to decide which hosts to use for that request,
            described in the <link linkend="costs-and-weights">costs and weight
            </link> section.
       <figure xml:id="filter-figure">
        <title>Filtering</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="figures/filteringWorkflow1.png "
                       scale="80"/>
          </imageobject>
        </mediaobject>
      </figure>
        </para>

    <para>The <literal>scheduler_available_filters</literal> configuration option
    in <filename>nova.conf</filename> provides the Compute service with the
    list of the filters that will be used by the scheduler. The default setting
    specifies all of the filter that are incldued with the Compute service:
    <programlisting>
scheduler_available_filters=nova.scheduler.filters.standard_filters
    </programlisting>
    This configuration option can be specified multiple times. For example,
    if you implemented your own custom filter in Python called 
    <literal>myfilter.MyFilter</literal> and you wanted to use both the
    built-in filters and your custom filter, your <filename>nova.conf</filename> 
    file would contain:
    <programlisting>
scheduler_available_filters=nova.scheduler.filters.standard_filters
scheduler_available_filters=myfilter.MyFilter
    </programlisting>
</para>
     <para>The <literal>scheduler_default_filters</literal> configuration option
      in <filename>nova.conf</filename> defines the list of filters
     that will be applied by the <command>nova-scheduler</command> service.
     As mentioned above, the default filtes are:
     <programlisting>
scheduler_default_filters=AvailabilityZoneFilter,RamFilter,ComputeFilter
     </programlisting>
</para>
        <para>The available filters are described below.</para>

    <section xml:id="allhostsfilter">
        <title>AllHostsFilter</title>
        <para>This is a no-op filter, it does not eliminate any of the available
            hosts.</para>
    </section>

    <section xml:id="availabilityzonefilter">
        <title>
            AvailabilityZoneFilter
        </title>
        <para>
            Filters hosts by availabilty zone. This filter must be enabled for
            the scheduler to respect availability zones in requests.
        </para>
    </section>

    <section xml:id="computefilter">
        <title>
            ComputeFilter
        </title>
        <para>
            Filters hosts by flavor (also known as instance type). The scheduler
            will check to ensure that a host has sufficient capabilities for
            the requested flavor. In general, this filter should always be
            enabled.
        </para>
    </section>

    <section xml:id="corefilter">
        <title>
            CoreFilter
        </title>
        <para>
            Only schedule instances on hosts if there are sufficient CPU cores
            available. If this filter is not set, the scheduler may overprovision
            a host based on cores (i.e., the virtual cores running on an instance
            may exceed the physical cores).
        </para>
    </section>

    <section xml:id="differenthostfilter">
            <title>DifferentHostFilter</title>
            <para>Schedule the instance on a different host from a
                set of instances. To take advantage of this filter, the requester
                must pass a scheduler hint, using  <literal>different_host</literal>
                as the keyand a list of instance uuids as the value. This
                filter is the opposite of the <literal>SameHostFilter</literal>. 
                Using the
                <command>nova</command> command-line tool, use the <literal>--hint</literal>
                flag. For example:
<screen>
<prompt>$</prompt> <userinput>nova boot --image cedef40a-ed67-4d10-800e-17455edce175 --flavor 1 --hint different_host=[a0cf03a5-d921-4877-bb5c-86d26cf818e1,8c19174f-4220-44f0-824a-cd1eeef10287] server-1</userinput>
</screen>
With the API, use the <literal>os:scheduler_hints</literal> key. For example:
<programlisting language="json">
    {
    'server': {
        'name': 'server-1',
        'imageRef': 'cedef40a-ed67-4d10-800e-17455edce175',
        'flavorRef': '1'
    },
    'os:scheduler_hints': {
        'different_host': ['a0cf03a5-d921-4877-bb5c-86d26cf818e1',
                           '8c19174f-4220-44f0-824a-cd1eeef10287'],
    }
}
</programlisting>
            </para>
        </section>

    <section xml:id="isolatedhostsfilter">
        <title>
            IsolatedHostsFilter
        </title>
        <para>
            Allows the admin to define a special (isolated) set of images and
            a special (isolated) set of hosts, such that the isolated images
            can only run on the isolated hosts, and the isolated hosts can
            only run isolated images.
        </para>
        <para>
            The admin must specify the isolated set of images and hosts in
            the <filename>nova.conf</filename> file using the <literal>isolated_hosts</literal> 
            and <literal>isolated_images</literal> configuration options. For
            example:
            <programlisting>
isolated_hosts=server1,server2
isolated_images=342b492c-128f-4a42-8d3a-c5088cf27d13,ebd267a6-ca86-4d6c-9a0e-bd132d6b7d09
            </programlisting>
        </para>
    </section>

    <section xml:id="ramfilter">
        <title>RamFilter</title>
        <para>Only schedule instances on hosts if there is sufficient RAM
            available. If this filter is not set, the scheduler may
            overprovision a host based on RAM (i.e., the RAM allocated by
            virtual machine instances may exceed the physical RAM).</para>
        <para>This filter can be configured to allow a fixed amount of
            RAM overcommitment by using the <literal>ram_allocation_ratio</literal>
            configuration option in <filename>nova.conf</filename>. The default
            setting is:
<programlisting>
ram_allocation_ratio=1.5
</programlisting>
            With this setting, if there is 1GB of free RAM, the scheduler will
            allow instances up to size 1.5GB to be run on that instance.
        </para>
    </section>

        <section xml:id="samehostfilter">
            <title>SameHostFilter</title>
            <para>Schedule the instance on the same host as another instance
                in a set of of instances. To take advantage of this filter, the
                requester must pass a scheduler hint, using  <literal>same_host</literal>
                as the key and a list of instance uuids as the value. This
                filter is the opposite of the <literal>DifferentHostFilter</literal>. Using the
                <command>nova</command> command-line tool, use the <literal>--hint</literal>
                flag:
<screen>
<prompt>$</prompt> <userinput>nova boot --image cedef40a-ed67-4d10-800e-17455edce175 --flavor 1 --hint same_host=[a0cf03a5-d921-4877-bb5c-86d26cf818e1,8c19174f-4220-44f0-824a-cd1eeef10287] server-1</userinput></screen>
With the API, use the <literal>os:scheduler_hints</literal> key:
<programlisting>
    {
    'server': {
        'name': 'server-1',
        'imageRef': 'cedef40a-ed67-4d10-800e-17455edce175',
        'flavorRef': '1'
    },
    'os:scheduler_hints': {
        'same_host': ['a0cf03a5-d921-4877-bb5c-86d26cf818e1',
                      '8c19174f-4220-44f0-824a-cd1eeef10287'],
    }
}
</programlisting>
            </para>
        </section>

        <section xml:id="simplecidraffinityfilter">
            <title>SimpleCIDRAffinityFilter</title>
            <warning>
                <para>The SimpleCIDRAffinityFilter does not work properly in the Essex release.
                 See <link xlink:href="https://bugs.launchpad.net/nova/+bug/999928">bug
                 999928</link> for details.</para>
            </warning>
            <para>Schedule the instance based on host IP subnet range. To
                take advantage of this filter, the requester must specify a
                range of valid IP address in CIDR format, by passing two 
                scheduler hints:
            <variablelist>
              <varlistentry>
                <term><literal>build_near_host_ip</literal></term>
                <listitem>
                            <para>The first IP address in the subnet
                                (e.g.,
                                <literal>192.168.1.1</literal>)</para>
                        </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>cidr</literal></term>
                <listitem>
                            <para>The CIDR that corresponds to the
                                subnet (e.g.,
                                <literal>/24</literal>)</para>
                        </listitem>
              </varlistentry>
            </variablelist>

                Using the
                <command>nova</command> command-line tool, use the <literal>--hint</literal>
                flag. For example, to specify the IP subnet <literal>192.168.1.1/24</literal></para>
<screen>
<prompt>$</prompt> <userinput>nova boot --image cedef40a-ed67-4d10-800e-17455edce175 --flavor 1 --hint build_near_host_ip=192.168.1.1 --hint cidr=/24 server-1</userinput>
</screen>
            <para>With the API, use the <literal>os:scheduler_hints</literal> key:</para>
<programlisting language="json">
    {
    'server': {
        'name': 'server-1',
        'imageRef': 'cedef40a-ed67-4d10-800e-17455edce175',
        'flavorRef': '1'
    },
    'os:scheduler_hints': {
        'build_near_host_ip': '192.168.1.1',
        'cidr': '24'
    }
}
</programlisting>
        </section>

    </section>

    <section xml:id="costs-and-weights">
        <title>Costs and Weights</title>
        <para>

       <figure xml:id="cost-figure">
        <title>Computing weighted costs</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="figures/filteringWorkflow2.png "
                       scale="80"/>
          </imageobject>
        </mediaobject>
      </figure>


            The Filter Scheduler takes the hosts that remain after the filters
            have been applied and applies one or more cost function to each host
            to get numerical scores for each host. Each cost score is multiplied
            by a weighting constant specified in the <filename>nova.conf</filename>
            config file. The weighting constant configuration option is
            the name of the cost function, with the <literal>_weight</literal>
            string appended. Here is an example of specifying a cost function
            and its corresponding weight:
            <programlisting>
least_cost_functions=nova.scheduler.least_cost.compute_fill_first_cost_fn
compute_fill_first_cost_fn_weight=-1.0
            </programlisting>
        </para>
        <para>
        Multiple cost functions can be specified in the <literal>least_cost_functions</literal>
        configuration option, separated by commas. For example:
<programlisting>
least_cost_functions=nova.scheduler.least_cost.compute_fill_first_cost_fn,nova.scheduler.least_cost.noop_cost_fn
compute_fill_first_cost_fn_weight=-1.0
noop_cost_fn_weight=1.0
</programlisting>

            If there are multiple cost functions, then the weighted cost scores
            are added together. The scheduler selects the host that has the
            minimum weighted cost.

        The Compute service comes with two cost functions:
    </para>
        <section xml:id="compute_fill_first_cost_fn">
            <title>nova.scheduler.least_cost.compute_fill_first_cost_fn</title>
            <para>This cost function calculates the amount of free memory (RAM)
                available on the node. Because the scheduler minimizes cost,
                if this cost function is used as a weight of +1, by doing:
<programlisting>
compute_fill_first_cost_fn_weight=1.0
</programlisting>
                then the scheduler will
                tend to "fill up" hosts, scheduling virtual machine instances
                to the same host until there is no longer sufficient RAM to
                service the request, and then moving to the next node</para>
            <para>If the user specifies a weight of -1 by doing:
<programlisting>
compute_fill_first_cost_fn_weight=1.0
</programlisting>
                then the scheduler will favor hosts that have the most amount
                of available RAM, leading to a "spread-first" behavior.</para>
        </section>
        <section xml:id="noop_cost_fn">
            <title>nova.scheduler.least_cost.noop_cost_fn</title>
            <para>This cost function returns 1 for all hosts. It is a "no-op"
                cost function (i.e., it does not do anything to discriminate
                among hosts). In practice, this cost function is never used.</para>
        </section>
    </section>

    <section xml:id="other-schedulers">
        <title>Other Schedulers</title>
        <para>While an administrator is likely to only need to work with
            the Filter Scheduler, Compute comes with other schedulers as well,
            described below.</para>
        <section xml:id="chance-scheduler">
            <title>Chance Scheduler</title>
            <para>The Chance Scheduler (<literal>nova.scheduler.chance.ChanceScheduler</literal>)
            randomly selects from the lists of filtered hosts. It is the default
            volume scheduler.</para>
        </section>
        <section xml:id="multischeduler">
            <title>Multi Scheduler</title>
            <para>The Multi Scheduler <literal>nova.scheduler.multi.MultiScheduler</literal>
            holds multiple sub-schedulers, one for <literal>nova-compute</literal>
            requests and one for <literal>nova-volume</literal> requests. It
            is the default top-level scheduler as specified by the <literal>scheduler_driver</literal>
            configuration option.</para>
        </section>
        <section xml:id="simple">
            <title>Simple Scheulder</title>
            <para>The Simple Scheduler (<literal>nova.scheduler.simple.SimpleScheduler</literal>)
            implements a naive scheduler that tries to find the least loaded host
            (i.e., implements a "spread-first" algorithm). It can schedule requests
            for both <literal>nova-compute</literal> and <literal>nova-volume</literal>.
            </para>
            <para>The Simple Scheduler supports the following configuration
                options:
    <table rules="all" xml:id="simple-scheduler-conf">
        <caption>Description of Simple Scheduler configuration options</caption>
        <col width="30%"/>
        <col width="70%"/>
        <thead>
            <tr>
                <td>Configuration option=Default value</td>
                <td>(Type) Description</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <literal>max_cores=16</literal>
                </td>
                <td>
                    (IntOpt) The maximum number of instance cores to allow
                    per host. Used when servicing compute requests to determine
                    whether a host is a valid candidate for launching a VM
                    instance.
                </td>
            </tr>
            <tr>
                <td>
                    <literal>max_gigabytes=10000</literal>
                </td>
                <td>
                    (IntOpt) Maximum number of volume gigabytes to allow per
                    host. Used when servicing volume requests to determine
                    whether a host is a valid candidate for creating a new
                    volume.
                </td>
            </tr>
            <tr>
                <td>
                    <literal>
                     skip_isolated_core_check=true
                    </literal>
                </td>
                <td>
                    (BoolOpt) If true, allow overcommitting of vcpus on
                    <link linkend="isolatedhostsfilter">isolated hosts</link>.
                </td>
            </tr>
        </tbody>
    </table>
            </para>
        </section>
    </section>
</chapter>
