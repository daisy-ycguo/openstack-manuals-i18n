<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ch_openstack-compute-tutorials">
    <title>OpenStack Compute Tutorials</title>
    <para>We want OpenStack to make sense, and sometimes the best way to make sense of the cloud is to try out some basic ideas with cloud computing. Flexible, elastic, and scalable are a few attributes of cloud computing, so these tutorials show various ways to use virtual computing or web-based storage with OpenStack components.</para>
    <section xml:id="running-elastic-web-app-cloud">
        <title>Running Your First Elastic Web Application on the Cloud</title>

        <para>In this OpenStack Compute tutorial, we’ll walk through the creation of an elastic,
            scalable cloud running a WordPress installation on a few virtual machines.</para>

        <para>The tutorial assumes you have obtained a TryStack account at
            <link xlink:href="http://trystack.org">http://trystack.org</link>. It has a working installation of OpenStack
            Compute, or you can install your own using the installation guides. </para>

        <para>We'll go through this tutorial in parts:</para>
        <itemizedlist>

            <listitem><para>Setting up a user on the TryStack cloud.</para></listitem>

            <listitem><para>Getting images for your application servers.</para></listitem>

            <listitem><para>On the instances you spin up, installing Wordpress and its dependencies, the Memcached plugin, and multiple memcache servers.</para></listitem>

        </itemizedlist>
        <section xml:id="part-i-setting-up-cloud-infrastructure">
            <title>Part I: Setting Up as a TryStack User</title>
            <para>In this part, we'll get a TryStack account using our
                Facebook login. Onward, brave cloud pioneers! </para>
                <para>Go to the TryStack Facebook account at <link
                    xlink:href="https://www.facebook.com/groups/269238013145112/"
                    >https://www.facebook.com/groups/269238013145112/</link>
                and request to join the group. </para>
            <para>Once you've joined the group, go to the TryStack
                dashboard and click <guilabel>Login using
                    Facebook</guilabel>. </para>
            <para>Enter your Facebook login information to receive
                your username and password that you can use with the
                Compute API.</para>
            <para>Next, install the python-novaclient and set up your environment variables so you
                can use the client with your username and password already entered. Here's what
                works well on Mac OS
                X.<screen> 
<prompt>$</prompt> <userinput>pip install -e git+https://github.com/openstack/python-novaclient.git#egg=python-novaclient</userinput>
                     </screen>
                Next, create a file named openrc to contain your TryStack credentials, such
                as:<programlisting language="bash">
export OS_USERNAME=joecool
export OS_PASSWORD=coolword
export OS_TENANT_NAME=coolu
export OS_AUTH_URL=http://trystack.org:5000/v2.0
export NOVA_VERSION=1.1
                </programlisting>
                Lastly, run this file to source your credentials.
                <screen>
<prompt>$</prompt> <userinput>source openrc</userinput>
                </screen></para>
            <para>You can always retrieve your username and password
                from <link
                    xlink:href="https://trystack.org/dash/api_info/"
                    >https://trystack.org/dash/api_info/</link> after
                logging in with Facebook. </para>
                <para>Okay, you've created the basic scaffolding for
                    your cloud user so that you can get some images
                    and run instances on TryStack with your starter
                    set of StackDollars. You're rich, man! Now to Part
                    II!</para>
        </section>
        <section xml:id="part-ii-getting-virtual-machines">
            <title>Part II: Starting Virtual Machines </title>
            <para>Understanding what you can do with cloud computing
                means you should have a grasp on the concept of
                virtualization. With virtualization, you can run
                operating systems and applications on virtual machines
                instead of physical computers. To use a virtual
                machine, you must have an image that contains all the
                information about which operating system to run, the
                user login and password, files stored on the system,
                and so on. Fortunately, TryStack provides images for
                your use. </para>
            <para>Basically, run:</para>
            <para>
                <screen>
<prompt>$</prompt> <userinput>nova image-list</userinput>
                </screen>
            </para>
            <para>and look for the images available in the text that
                returns. Look for the ID
                value.<programlisting>
+----+--------------------------------------+--------+--------+
| ID |                 Name                 | Status | Server |
+----+--------------------------------------+--------+--------+
| 12 | natty-server-cloudimg-amd64-kernel   | ACTIVE |        |
| 13 | natty-server-cloudimg-amd64          | ACTIVE |        |
| 14 | oneiric-server-cloudimg-amd64-kernel | ACTIVE |        |
| 15 | oneiric-server-cloudimg-amd64        | ACTIVE |        |
+----+--------------------------------------+--------+--------+
                </programlisting></para>
            <para>Now get a list of the flavors you can launch:</para>
            <para>
                <screen>
<prompt>$</prompt> <userinput>nova flavor-list</userinput>
                </screen>
            </para>
            <para><programlisting>
+----+-----------+-----------+------+-----------+------+-------+-------------+
| ID |    Name   | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor |
+----+-----------+-----------+------+-----------+------+-------+-------------+
| 1  | m1.tiny   | 512       | 0    | N/A       | 0    | 1     |             |
| 2  | m1.small  | 2048      | 20   | N/A       | 0    | 1     |             |
| 3  | m1.medium | 4096      | 40   | N/A       | 0    | 2     |             |
| 4  | m1.large  | 8192      | 80   | N/A       | 0    | 4     |             |
| 5  | m1.xlarge | 16384     | 160  | N/A       | 0    | 8     |             |
+----+-----------+-----------+------+-----------+------+-------+-------------+
            </programlisting>Create
                a keypair to launch the image, in a directory where
                you run the nova boot command later.
                <screen>
<prompt>$</prompt> <userinput>nova keypair-add mykeypair > mykeypair.pem</userinput>
                </screen></para>
            <para>Create security group that enables public IP access for the webserver that will
                run WordPress for you. You can also enable port 22 for
                SSH.<screen>
<prompt>$</prompt> <userinput>nova secgroup-create openpub "Open for public"</userinput>
<prompt>$</prompt> <userinput>nova secgroup-add-rule openpub icmp -1 -1 0.0.0.0/0 </userinput>
<prompt>$</prompt> <userinput>nova secgroup-add-rule openpub tcp 22 22 0.0.0.0/0 </userinput> 
                </screen></para>
            <para>Next, with the ID value of the server you want to
                launch and the ID of the flavor you want to launch,
                use your credentials to start up the instance with the
                identifier you got by looking at the image
                list.</para>
            <screen><prompt>$</prompt> <userinput>nova boot --image 15 --flavor 2 --key_name mykeypair --security_groups openpub testtutorial</userinput></screen>
            <para><programlisting>
+--------------+--------------------------------------+
|   Property   |                Value                 |
+--------------+--------------------------------------+
| accessIPv4   |                                      |
| accessIPv6   |                                      |
| adminPass    | StuacCpAr7evnz5Q                     |
| config_drive |                                      |
| created      | 2012-03-21T20:31:40Z                 |
| flavor       | m1.small                             |
| hostId       |                                      |
| id           | 1426                                 |
| image        | oneiric-server-cloudimg-amd64        |
| key_name     | testkey2                             |
| metadata     | {}                                   |
| name         | testtut                              |
| progress     | 0                                    |
| status       | BUILD                                |
| tenant_id    | 296                                  |
| updated      | 2012-03-21T20:31:40Z                 |
| user_id      | facebook521113267                    |
| uuid         | be9f80e8-7b20-49e8-83cf-fa059a36c9f8 |
+--------------+--------------------------------------+
            </programlisting>Now
                you can look at the state of the running instances by
                using nova list.
                <screen>$ nova list</screen><programlisting>
+------+----------------+--------+----------------------+
|  ID  |      Name      | Status |       Networks       |
+------+----------------+--------+----------------------+
| 1426 | testtut        | ACTIVE | internet=8.22.27.251 |
+------+----------------+--------+----------------------+
                </programlisting></para>
            <para>The instance goes from “launching” to “running” in a
                short time, and you should be able to connect via SSH.
                Look at the IP addresses so that you can connect to
                the instance once it starts running.</para>
        </section>
        <section xml:id="diagnose-compute-tutorial">
            <title>Diagnose your compute node</title>
            
            <para>You can obtain extra informations about the instance you just spawned : its CPU
                usage, the memory, the disk io or network io, per instance, by running the
                    <command>nova diagnostics</command> command:</para>

            <screen>
<prompt>$</prompt> <userinput>nova diagnostics</userinput>
            </screen>
        </section>
        <section xml:id="installing-needed-software-for-web-scale">
            <title>Part III: Installing the Needed Software for the Web-Scale Scenario</title>
            <para>Basically launch a terminal window from any computer, and enter: </para>
            <screen>
<prompt>$</prompt> <userinput>ssh -i mykeypair ubuntu@10.127.35.119</userinput>
            </screen>
            <para>On this particular image, the 'ubuntu' user has been set up as part of the sudoers
                group, so you can escalate to 'root' via the following command:</para>
            <screen>
<prompt>$</prompt> <userinput>sudo -i</userinput>
            </screen>
            <simplesect>
                <title>On the first VM, install WordPress</title>
                <para>Now, you can install WordPress. Create and then switch to a blog
                    directory:</para>
                <screen>
<prompt>$</prompt> <userinput>mkdir blog</userinput>
<prompt>$</prompt> <userinput>cd blog</userinput>
                </screen>
                <para>Download WordPress directly to you by using wget:</para>
                <screen>
<prompt>$</prompt> <userinput>wget http://wordpress.org/latest.tar.gz</userinput>
                </screen>
                <para>Then unzip the package using: </para>
                <screen>
<prompt>$</prompt> <userinput>tar -xzvf latest.tar.gz</userinput>
                </screen>
                <para>The WordPress package will extract into a folder called wordpress in the same
                    directory that you downloaded latest.tar.gz. </para>
                <para>Next, enter "exit" and disconnect from this SSH session.</para>
            </simplesect>
            <simplesect>
                <title>On a second VM, install MySQL</title>
                <para>Next, SSH into another virtual machine and install MySQL and use these
                    instructions to install the WordPress database using the MySQL Client from a
                    command line: <link xlink:href="http://codex.wordpress.org/Installing_WordPress#Using_the_MySQL_Client">Using the MySQL Client - Wordpress Codex.</link>
                </para>
            </simplesect>

            <simplesect><title>On a third VM, install Memcache</title><para>Memcache makes Wordpress database reads and writers more efficient, so your virtual servers
                    can go to work for you in a scalable manner. SSH to a third virtual machine and
                    install Memcache:</para>
                <para>
                    <screen>
<prompt>$</prompt> <userinput>apt-get install memcached</userinput>
                    </screen>
                </para></simplesect><simplesect><title>Configure the Wordpress Memcache plugin</title><para>From a web browser, point to the IP address of your Wordpress server. Download and install the Memcache Plugin. Enter the IP address of your Memcache server.</para></simplesect>
        </section><section xml:id="running-a-blog-in-the-cloud">
            <title>Running a Blog in the Cloud</title><para>That's it! You're now running your blog on a cloud server in OpenStack Compute, and you've scaled it horizontally using additional virtual images to run the database and Memcache. Now if your blog gets a big boost of comments, you'll be ready for the extra reads-and-writes to the database. </para></section>
    </section>
</chapter>
