<?xml version="1.0" encoding="UTF-8"?>
<para xmlns= "http://docbook.org/ns/docbook" version= "5.0">
   <table rules= "all" frame= "border" xml:id= "common-nova-conf" width= "100%">
        <caption>Description of common nova.conf configuration options
            for the Compute API, RabbitMQ, EC2 API, S3 API, instance
            types</caption>
        <col width= "50%"/>
        <col width= "50%"/>
        <thead>
            <tr>
                <td><para>Configuration option=Default value</para></td>
                <td><para>(Type) Description</para></td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><para> allow_resize_to_same_host=false </para></td>
                <td><para> (BoolOpt) Allow destination machine to match
                    source for resize. Useful when testing in
                    single-host environments. </para></td>
            </tr>
            <tr>
                <td><para> api_paste_config=api-paste.ini </para></td>
                <td><para> (StrOpt) File name for the paste.deploy config
                    for nova-api </para></td>
            </tr>
            <tr>
                <td><para> api_rate_limit=true </para></td>
                <td><para> (BoolOpt) whether to rate limit the Compute API
                </para></td>
            </tr>
            <tr>
                <td><para> aws_access_key_id=admin </para></td>
                <td><para> (StrOpt) AWS Access ID </para></td>
            </tr>
            <tr>
                <td><para> aws_secret_access_key=admin </para></td>
                <td><para> (StrOpt) AWS Access Key </para></td>
            </tr>
            <tr>
                <td><para> bandwith_poll_interval=600 </para></td>
                <td><para> (IntOpt) interval to pull bandwidth usage info
                </para></td>
            </tr>
            <tr>
                <td><para> bindir=$pybasedir/bin </para></td>
                <td><para> (StrOpt) Directory where nova binaries are
                    installed </para></td>
            </tr>
            <tr>
                <td><para> cache_images=true </para></td>
                <td><para> (BoolOpt) Cache glance images locally </para></td>
            </tr>
            <tr>
                <td><para> cert_manager=nova.cert.manager.CertManager </para></td>
                <td><para> (StrOpt) full class name for the Manager for cert
                </para></td>
            </tr>
            <tr>
                <td><para> cert_topic=cert </para></td>
                <td><para> (StrOpt) the topic cert nodes listen on </para></td>
            </tr>
            <tr>
                <td><para> compute_api_class=nova.compute.api.API </para></td>
                <td><para> (StrOpt) The full class name of the Compute API
                    class to use </para></td>
            </tr>
            <tr>
                <td><para>
                    compute_manager=nova.compute.manager.ComputeManager </para></td>
                <td><para> (StrOpt) full class name for the Manager for
                    compute </para></td>
            </tr>
            <tr>
                <td><para> compute_topic=compute </para></td>
                <td><para> (StrOpt) the topic compute nodes listen on </para></td>
            </tr>
            <tr>
                <td><para>config_file=/etc/nova/nova.conf </para></td>
                <td><para> (MultiStrOpt) Path to a config file to use.
                    Multiple config files can be specified, with
                    values in later files taking precedence. The
                    default files used are: [] </para></td>
            </tr>
            <tr>
                <td><para>connection_type=&lt;None&gt; </para></td>
                <td><para> (StrOpt) Virtualization API connection type :
                    libvirt, xenapi, or fake </para></td>
            </tr>
            <tr>
                <td><para>
                    console_manager=nova.console.manager.ConsoleProxyManager </para></td>
                <td><para> (StrOpt) full class name for the Manager for
                    console proxy </para></td>
            </tr>
            <tr>
                <td><para> console_topic=console </para></td>
                <td><para> (StrOpt) the topic console proxy nodes listen on
                </para></td>
            </tr>
            <tr>
                <td><para> control_exchange=nova </para></td>
                <td><para> (StrOpt) the main RabbitMQ exchange to connect to
                </para></td>
            </tr>
            <tr>
                <td><para> debug=false </para></td>
                <td><para> (BoolOpt) Print debugging output </para></td>
            </tr>
            <tr>
                <td><para>default_access_ip_network_name=&lt;None&gt; </para></td>
                <td><para> (StrOpt) Name of network to use to set access ips
                    for instances </para></td>
            </tr>
            <tr>
                <td><para>default_ephemeral_format=&lt;None&gt; </para></td>
                <td><para> (StrOpt) The default format a ephemeral_volume
                    will be formatted with on creation. </para></td>
            </tr>
            <tr>
                <td><para> default_image=ami-11111 </para></td>
                <td><para> (StrOpt) default image to use, testing only </para></td>
            </tr>
            <tr>
                <td><para> default_instance_type=m1.small </para></td>
                <td><para> (StrOpt) default instance type to use, testing
                    only </para></td>
            </tr>
            <tr>
                <td><para> default_project=openstack </para></td>
                <td><para> (StrOpt) the default project to use for OpenStack
                </para></td>
            </tr>
            <tr>
                <td><para>default_schedule_zone=&lt;None&gt; </para></td>
                <td><para> (StrOpt) availability zone to use when user
                    doesn't specify one </para></td>
            </tr>
            <tr>
                <td><para> disable_process_locking=false </para></td>
                <td><para> (BoolOpt) Whether to disable inter-process locks
                </para></td>
            </tr>
            <tr>
                <td><para> ec2_dmz_host=$my_ip </para></td>
                <td><para> (StrOpt) the internal IP address of the EC2 API
                    server </para></td>
            </tr>
            <tr>
                <td><para> ec2_host=$my_ip </para></td>
                <td><para> (StrOpt) the IP of the ec2 api server </para></td>
            </tr>
            <tr>
                <td><para> ec2_path=/services/Cloud </para></td>
                <td><para> (StrOpt) the path prefix used to call the EC2 API
                    server </para></td>
            </tr>
            <tr>
                <td><para> ec2_port=8773 </para></td>
                <td><para> (IntOpt) the port of the EC2 API server </para></td>
            </tr>
            <tr>
                <td><para> ec2_scheme=http </para></td>
                <td><para> (StrOpt) the protocol to use when connecting to
                    the EC2 API server (http, https) </para></td>
            </tr>
            <tr>
                <td><para> enable_instance_password=true </para></td>
                <td><para> (BoolOpt) Allows use of instance password during
                    server creation </para></td>
            </tr>
            <tr>
                <td><para>
                    enabled_apis=ec2,osapi_compute,osapi_volume,metadata </para></td>
                <td><para> (ListOpt) a list of APIs to enable by default
                </para></td>
            </tr>
            <tr>
                <td><para> fake_network=false </para></td>
                <td><para> (BoolOpt) If passed, use fake network devices and
                    addresses </para></td>
            </tr>
            <tr>
                <td><para> fake_rabbit=false </para></td>
                <td><para> (BoolOpt) If passed, use a fake RabbitMQ provider
                </para></td>
            </tr>
            <tr>
                <td><para>
                    firewall_driver=nova.virt.firewall.IptablesFirewallDriver </para></td>
                <td><para> (StrOpt) Firewall driver (defaults to iptables)
                </para></td>
            </tr>
            <tr>
                <td><para>
                    floating_ip_dns_manager=nova.network.dns_driver.DNSDriver </para></td>
                <td><para> (StrOpt) full class name for the DNS Manager for
                    floating IPs </para></td>
            </tr>
            <tr>
                <td><para> glance_api_servers=$glance_host:$glance_port </para></td>
                <td><para> (ListOpt) A list of the glance API servers
                    available to nova ([hostname|ip]:port) </para></td>
            </tr>
            <tr>
                <td><para> glance_host=$my_ip </para></td>
                <td><para> (StrOpt) default glance hostname or IP </para></td>
            </tr>
            <tr>
                <td><para> glance_num_retries=0 </para></td>
                <td><para> (IntOpt) Number retries when downloading an image
                    from glance </para></td>
            </tr>
            <tr>
                <td><para> glance_port=9292 </para></td>
                <td><para> (IntOpt) default glance port </para></td>
            </tr>
            <tr>
                <td><para> host=MGG2WEDRJM </para></td>
                <td><para> (StrOpt) Name of this node. This can be an opaque
                    identifier. It is not necessarily a hostname,
                    FQDN, or IP address. </para></td>
            </tr>
            <tr>
                <td><para>
                    image_service=nova.image.glance.GlanceImageService </para></td>
                <td><para> (StrOpt) The service to use for retrieving and
                    searching images. </para></td>
            </tr>
            <tr>
                <td><para> instance_dns_domain= </para></td>
                <td><para> (StrOpt) full class name for the DNS Zone for
                    instance IPs </para></td>
            </tr>
            <tr>
                <td><para>
                    instance_dns_manager=nova.network.dns_driver.DNSDriver </para></td>
                <td><para> (StrOpt) full class name for the DNS Manager for
                    instance IPs </para></td>
            </tr>
            <tr>
                <td><para> instance_usage_audit_period=month </para></td>
                <td><para> (StrOpt) time period to generate instance usages
                    for. Time period must be hour, day, month or year
                </para></td>
            </tr>
            <tr>
                <td><para> isolated_hosts= </para></td>
                <td><para> (ListOpt) Host reserved for specific images </para></td>
            </tr>
            <tr>
                <td><para> isolated_images= </para></td>
                <td><para> (ListOpt) Images to run on isolated host </para></td>
            </tr>
            <tr>
                <td><para> lock_path=$pybasedir </para></td>
                <td><para> (StrOpt) Directory to use for lock files </para></td>
            </tr>
            <tr>
                <td><para>log-config=&lt;None&gt; </para></td>
                <td><para> (StrOpt) If this option is specified, the logging
                    configuration file specified is used and overrides
                    any other logging options specified. Please see
                    the Python logging module documentation for
                    details on logging configuration files. </para></td>
            </tr>
            <tr>
                <td><para> log-date-format=%Y-%m-%d %H:%M:%S </para></td>
                <td><para> (StrOpt) Format string for %(asctime)s in log
                    records. Default: %default </para></td>
            </tr>
            <tr>
                <td><para>log-dir=&lt;None&gt; </para></td>
                <td><para> (StrOpt) (Optional) The directory to keep log
                    files in (will be prepended to --logfile) </para></td>
            </tr>
            <tr>
                <td><para>log-file=&lt;None&gt; </para></td>
                <td><para> (StrOpt) (Optional) Name of log file to output
                    to. If not set, logging will go to stdout. </para></td>
            </tr>
            <tr>
                <td><para> log-format= "%(asctime)s %(levelname)8s [%(name)s]
                    %(message)s" </para></td>
                <td><para> (StrOpt) A logging.Formatter log message format
                    string which may use any of the available
                    logging.LogRecord attributes. Default: %default
                </para></td>
            </tr>
            <tr>
                <td><para>logdir=&lt;None&gt; </para></td>
                <td><para> (StrOpt) Log output to a per-service log file in
                    named directory </para></td>
            </tr>
            <tr>
                <td><para>logfile=&lt;None&gt; </para></td>
                <td><para> (StrOpt) Log output to a named file </para></td>
            </tr>
            <tr>
                <td><para> logfile_mode=0644 </para></td>
                <td><para> (StrOpt) Default file mode used when creating log
                    files </para></td>
            </tr>
            <tr>
                <td><para>memcached_servers=&lt;None&gt; </para></td>
                <td><para> (ListOpt) Memcached servers or None for in
                    process cache. </para></td>
            </tr>
            <tr>
                <td><para> metadata_host=$my_ip </para></td>
                <td><para> (StrOpt) the IP for the metadata API server </para></td>
            </tr>
            <tr>
                <td><para> metadata_port=8775 </para></td>
                <td><para> (IntOpt) the port for the metadata API port </para></td>
            </tr>
            <tr>
                <td><para> monkey_patch=false </para></td>
                <td><para> (BoolOpt) Whether to log monkey patching </para></td>
            </tr>
            <tr>
                <td><para>
                    monkey_patch_modules=nova.api.ec2.cloud:nova.notifier.api.notify_decorator, nova.compute.api:nova.notifier.api.notify_decorator </para></td>
                <td><para> (ListOpt) List of modules/decorators to monkey
                    patch </para></td>
            </tr>
            <tr>
                <td><para> my_ip=192.168.1.82 </para></td>
                <td><para> (StrOpt) IP address of this host </para></td>
            </tr>
            <tr>
                <td><para> network_api_class=nova.network.api.API </para></td>
                <td><para> (StrOpt) The full class name of the network API
                    class to use </para></td>
            </tr>
            <tr>
                <td><para> network_driver=nova.network.linux_net </para></td>
                <td><para> (StrOpt) Driver to use for network creation </para></td>
            </tr>
            <tr>
                <td><para>
                    network_manager=nova.network.manager.VlanManager </para></td>
                <td><para> (StrOpt) full class name for the Manager for
                    network </para></td>
            </tr>
            <tr>
                <td><para> network_topic=network </para></td>
                <td><para> (StrOpt) the topic network nodes listen on </para></td>
            </tr>
            <tr>
                <td><para> node_availability_zone=nova </para></td>
                <td><para> (StrOpt) availability zone of this node </para></td>
            </tr>
            <tr>
                <td><para>
                    notification_driver=nova.notifier.no_op_notifier </para></td>
                <td><para> (StrOpt) Default driver for sending notifications
                </para></td>
            </tr>
            <tr>
                <td><para> null_kernel=nokernel </para></td>
                <td><para> (StrOpt) kernel image that indicates not to use a
                    kernel, but to use a raw disk image instead </para></td>
            </tr>
            <tr>
                <td><para> osapi_compute_ext_list= </para></td>
                <td><para> (ListOpt) Specify list of extensions to load when
                    using osapi_compute_extension option with
                    nova.api.openstack.compute.contrib.select_extensions
                </para></td>
            </tr>
            <tr>
                <td><para>
                    osapi_compute_extension=nova.api.openstack.compute.contrib.standard_extensions </para></td>
                <td><para> (MultiStrOpt) Compute API extensions to load
                </para></td>
            </tr>
            <tr>
                <td><para>osapi_compute_link_prefix=&lt;None&gt; </para></td>
                <td><para> (StrOpt) Base URL that will be presented to users
                    in links to the OpenStack Compute API </para></td>
            </tr>
            <tr>
                <td><para>osapi_glance_link_prefix=&lt;None&gt; </para></td>
                <td><para> (StrOpt) Base URL that will be presented to users
                    in links to glance resources </para></td>
            </tr>
            <tr>
                <td><para> osapi_max_limit=1000 </para></td>
                <td><para> (IntOpt) the maximum number of items returned in
                    a single response from a collection resource </para></td>
            </tr>
            <tr>
                <td><para> osapi_path=/v1.1/ </para></td>
                <td><para> (StrOpt) the path prefix used to call the
                    OpenStack Compute API server </para></td>
            </tr>
            <tr>
                <td><para> osapi_scheme=http </para></td>
                <td><para> (StrOpt) the protocol to use when connecting to
                    the OpenStack Compute API server (http, https)
                </para></td>
            </tr>
            <tr>
                <td><para> osapi_volume_ext_list= </para></td>
                <td><para> (ListOpt) Specify list of extensions to load when
                    using osapi_volume_extension option with
                    nova.api.openstack.volume.contrib.select_extensions
                </para></td>
            </tr>
            <tr>
                <td><para>
                    osapi_volume_extension=nova.api.openstack.volume.contrib.standard_extensions </para></td>
                <td><para> (MultiStrOpt) osapi volume extension to load
                </para></td>
            </tr>
            <tr>
                <td><para> password_length=12 </para></td>
                <td><para> (IntOpt) Length of generated instance admin
                    passwords </para></td>
            </tr>
            <tr>
                <td><para> pybasedir=/usr/lib/python/site-packages </para></td>
                <td><para> (StrOpt) Directory where the nova python module
                    is installed </para></td>
            </tr>
            <tr>
                <td><para> rabbit_durable_queues=false </para></td>
                <td><para> (BoolOpt) use durable queues in RabbitMQ </para></td>
            </tr>
            <tr>
                <td><para> rabbit_host=localhost </para></td>
                <td><para> (StrOpt) the RabbitMQ host </para></td>
            </tr>
            <tr>
                <td><para> rabbit_max_retries=0 </para></td>
                <td><para> (IntOpt) maximum retries with trying to connect
                    to RabbitMQ (the default of 0 implies an infinite
                    retry count) </para></td>
            </tr>
            <tr>
                <td><para> rabbit_password=guest </para></td>
                <td><para> (StrOpt) the RabbitMQ password </para></td>
            </tr>
            <tr>
                <td><para> rabbit_port=5672 </para></td>
                <td><para> (IntOpt) the RabbitMQ port </para></td>
            </tr>
            <tr>
                <td><para> rabbit_retry_backoff=2 </para></td>
                <td><para> (IntOpt) how long to backoff for between retries
                    when connecting to RabbitMQ </para></td>
            </tr>
            <tr>
                <td><para> rabbit_retry_interval=1 </para></td>
                <td><para> (IntOpt) how frequently to retry connecting with
                    RabbitMQ </para></td>
            </tr>
            <tr>
                <td><para> rabbit_use_ssl=false </para></td>
                <td><para> (BoolOpt) connect over SSL for RabbitMQ </para></td>
            </tr>
            <tr>
                <td><para> rabbit_userid=guest </para></td>
                <td><para> (StrOpt) the RabbitMQ userid </para></td>
            </tr>
            <tr>
                <td><para> rabbit_virtual_host=/ </para></td>
                <td><para> (StrOpt) the RabbitMQ virtual host </para></td>
            </tr>
            <tr>
                <td><para> reclaim_instance_interval=0 </para></td>
                <td><para> (IntOpt) Interval in seconds for reclaiming
                    deleted instances </para></td>
            </tr>
            <tr>
                <td><para> region_list= </para></td>
                <td><para> (ListOpt) list of region=fqdn pairs separated by
                    commas </para></td>
            </tr>
            <tr>
                <td><para> resume_guests_state_on_host_boot=false </para></td>
                <td><para> (BoolOpt) Whether to start guests that were
                    running before the host rebooted.
                    If enabled, this option causes guests assigned
                    to the host to be restarted when
                    <application>nova-compute</application> starts,
                    <emphasis>if</emphasis> they had been active on the host while
                    <application>nova-compute</application> last ran.
                    If such a guest is already found to be running,
                    it is left untouched. </para></td>
            </tr>
            <tr>
                <td><para> root_helper=sudo </para></td>
                <td><para> (StrOpt) Command prefix to use for running
                    commands as root </para></td>
            </tr>
            <tr>
                <td><para> s3_dmz=$my_ip </para></td>
                <td><para> (StrOpt) hostname or IP for the instances to use
                    when accessing the S3 API </para></td>
            </tr>
            <tr>
                <td><para> s3_host=$my_ip </para></td>
                <td><para> (StrOpt) hostname or IP for OpenStack to use when
                    accessing the S3 API </para></td>
            </tr>
            <tr>
                <td><para> s3_port=3333 </para></td>
                <td><para> (IntOpt) port used when accessing the S3 API
                </para></td>
            </tr>
            <tr>
                <td><para>
                    scheduler_manager=nova.scheduler.manager.SchedulerManager </para></td>
                <td><para> (StrOpt) full class name for the Manager for
                    scheduler </para></td>
            </tr>
            <tr>
                <td><para> scheduler_topic=scheduler </para></td>
                <td><para> (StrOpt) the topic scheduler nodes listen on
                </para></td>
            </tr>
            <tr>
                <td><para>
                    security_group_handler=nova.network.quantum.sg.NullSecurityGroupHandler </para></td>
                <td><para> (StrOpt) The full class name of the security
                    group handler class </para></td>
            </tr>
            <tr>
                <td><para> service_down_time=60 </para></td>
                <td><para> (IntOpt) maximum time since last check-in for up
                    service </para></td>
            </tr>
            <tr>
                <td><para> start_guests_on_host_boot=false </para></td>
                <td><para> (BoolOpt) Whether to (re-)start guests when the host
                    reboots. If enabled, this option causes guests assigned
                    to the host to be <emphasis>unconditionally</emphasis>
                    restarted when <application>nova-compute</application>
                    starts. If the guest is found to be stopped, it starts.
                    If it is found to be running, it reboots. </para></td>
            </tr>
            <tr>
                <td><para> state_path=$pybasedir </para></td>
                <td><para> (StrOpt) Top-level directory for maintaining
                    nova's state </para></td>
            </tr>
            <tr>
                <td><para> stub_network=False </para></td>
                <td><para> (StrOpt) Stub network related code </para></td>
            </tr>
            <tr>
                <td><para> syslog-log-facility=LOG_USER </para></td>
                <td><para> (StrOpt) syslog facility to receive log lines
                </para></td>
            </tr>
            <tr>
                <td><para> use_cow_images=true </para></td>
                <td><para> (BoolOpt) Whether to use cow images </para></td>
            </tr>
            
            <tr>
                <td><para> use_stderr=true </para></td>
                <td><para> (BoolOpt) Log output to standard error </para></td>
            </tr>
            <tr>
                <td><para> use-syslog=false </para></td>
                <td><para> (BoolOpt) Use syslog for logging. </para></td>
            </tr>
            <tr>
                <td><para> verbose=false </para></td>
                <td><para> (BoolOpt) Print more verbose output </para></td>
            </tr>
            <tr>
                <td><para> volume_api_class=nova.volume.api.API </para></td>
                <td><para> (StrOpt) The full class name of the volume API
                    class to use </para></td>
            </tr>
            <tr>
                <td><para>
                    volume_manager=nova.volume.manager.VolumeManager </para></td>
                <td><para> (StrOpt) full class name for the Manager for
                    volume </para></td>
            </tr>
            <tr>
                <td><para> volume_topic=volume </para></td>
                <td><para> (StrOpt) the topic volume nodes listen on </para></td>
            </tr>
            <tr>
                <td><para> vpn_image_id=0 </para></td>
                <td><para> (StrOpt) image id used when starting up a
                    cloudpipe VPN server </para></td>
            </tr>
            <tr>
                <td><para> vpn_key_suffix=-vpn </para></td>
                <td><para> (StrOpt) Suffix to add to project name for vpn
                    key and secgroups </para></td>
            </tr>
            <tr>
                <td><para> zombie_instance_updated_at_window=172800 </para></td>
                <td><para> (IntOpt) Number of seconds zombie instances are
                    cleaned up. </para></td>
            </tr>

        </tbody>
    </table>
</para>
