<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ch_introduction-to-openstack-compute">
    <title>Introduction to OpenStack Compute</title>
    <para>OpenStack Compute gives you a tool to orchestrate a cloud, including running instances,
        managing networks, and controlling access to the cloud through users and projects. The
        underlying open source project's name is Nova, and it provides the software that can control
        an Infrastructure as a Service (IaaS) cloud computing platform. It is similar in scope to
        Amazon EC2 and Rackspace Cloud Servers. OpenStack Compute does not include any
        virtualization software; rather it defines drivers that interact with underlying
        virtualization mechanisms that run on your host operating system, and exposes functionality
        over a web-based API.</para>
    
    <section xml:id="hypervisors">
        <title>Hypervisors</title>
    
    <para>OpenStack Compute requires a hypervisor and Compute controls the hypervisors through an
            API server. The process for selecting a hypervisor usually means prioritizing and making
            decisions based on budget and resource constraints as well as the inevitable list of
            supported features and required technical specifications. The majority of development is
            done with the KVM and Xen-based hypervisors. Refer to <link
                xlink:href="http://wiki.openstack.org/HypervisorSupportMatrix"
                >http://wiki.openstack.org/HypervisorSupportMatrix</link> for a detailed list of
        features and support across the hypervisors.  </para>
        <para>With OpenStack Compute, you can orchestrate clouds using multiple hypervisors in
            different zones. The types of virtualization standards that may be used with Compute
            include:</para>
        <itemizedlist>
            <listitem>
                <para><link xlink:href="http://www.linux-kvm.org/page/Main_Page">KVM</link> -
                    Kernel-based Virtual Machine</para>
            </listitem>
            <listitem>
                <para><link xlink:href="http://lxc.sourceforge.net/">LXC</link> - Linux Containers
                    (through libvirt)</para>
            </listitem>
            <listitem>
                <para><link xlink:href="http://wiki.qemu.org/Manual">QEMU</link> - Quick
                    EMUlator</para>
            </listitem>
            <listitem>
                <para><link xlink:href="http://user-mode-linux.sourceforge.net/">UML</link> - User
                    Mode Linux</para>
            </listitem>
            <listitem>
                <para><link
                        xlink:href="http://www.vmware.com/products/vsphere-hypervisor/support.html"
                        >VMWare ESX/ESXi</link> 4.1 update 1</para>
            </listitem>
            <listitem>
                <para><link xlink:href="http://www.xen.org/support/documentation.html">Xen</link> -
                    Xen, Citrix XenServer and Xen Cloud Platform (XCP)</para>
            </listitem>
        </itemizedlist>
    </section>
    <section xml:id="users-and-projects">
        <title>Users and Tenants (Projects)</title>
        <para>The OpenStack Compute system is designed to be used by many different cloud computing
            consumers or customers, basically tenants on a shared system, using role-based access
            assignments. Roles control the actions that a user is allowed to perform. In the default
            configuration, most actions do not require a particular role, but this is configurable
            by the system administrator editing the appropriate <filename>policy.json</filename>
            file that maintains the rules. For example, a rule can be defined so that a user cannot
            allocate a public IP without the admin role. A user's access to particular images is
            limited by tenant, but the username and password are assigned per user. Key pairs
            granting access to an instance are enabled per user, but quotas to control resource
            consumption across available hardware resources are per tenant. <note>
                <para>Earlier versions of OpenStack used the term "project" instead of "tenant".
                    Because of this legacy terminology, some command-line tools use
                        <literal>--project_id</literal> when a tenant ID is expected.</para>
            </note></para>
<para>While the original EC2 API supports users, OpenStack Compute adds the concept of tenants.
            Tenants are isolated resource containers forming the principal organizational structure
            within the Compute service. They consist of a separate VLAN, volumes, instances, images,
            keys, and users. A user can specify which tenant he or she wishes to be known as by
            appending <literal>:project_id</literal> to his or her access key. If no tenant is
            specified in the API request, Compute attempts to use a tenant with the same ID as the
            user. </para>
        <para>For tenants, quota controls are available to limit the:<itemizedlist>
                <listitem>
                    <para>Number of volumes which may be created</para>
                </listitem>
                <listitem>
                    <para>Total size of all volumes within a project as measured in GB</para>
                </listitem>
                <listitem>
                    <para>Number of instances which may be launched</para>
                </listitem>
                <listitem>
                    <para>Number of processor cores which may be allocated</para>
                </listitem>
                <listitem>
                    <para>Publicly accessible IP addresses</para>
                </listitem>
            </itemizedlist></para>
        
    </section><section xml:id="images-and-instances">
    <title>Images and Instances</title>
    
    <para>This introduction provides a high level overview of what
            images and instances are and description of the life-cycle
            of a typical virtual system within the cloud. There are
            many ways to configure the details of an OpenStack cloud
            and many ways to implement a virtual system within that
            cloud. These configuration details as well as the specific
            command line utilities and API calls to preform the
            actions described are presented in the <link
                linkend="ch_image_mgmt">Image Management</link> and
                <link linkend="ch_volumes">Volume Management</link>
            chapters.</para>

    <para>Images are disk images which are templates for virtual
            machine file systems. The image service, Glance, is
            responsible for the storage and management of images
            within OpenStack.</para>

    <para>Instances are the individual virtual machines running on
            physical compute nodes. The compute service, Nova, manages
            instances. Any number of instances maybe started from the
            same image. Each instance is run from a copy of the base
            image so runtime changes made by an instance do not change
            the image it is based on. Snapshots of running instances
            may be taken which create a new image based on the current
            disk state of a particular instance.</para>

    <para>When starting an instance a set of virtual resources known
            as a flavor must be selected. Flavors define how many
            virtual CPUs an instance has and the amount of RAM and
            size of its ephemeral disks. OpenStack provides a number
            of predefined flavors which cloud administrators may edit
            or add to. Users must select from the set of available
            flavors defined on their cloud.</para>

    <para>Additional resources such as persistent volume storage and
            public IP address may be added to and removed from running
            instances. The examples below show the nova-volume service
            which provide persistent block storage as opposed to the
            ephemeral storage provided by the instance flavor.</para>

    <para>Here is an example of the life cycle of a typical virtual
    system withing an OpenStack cloud to illustrate these
    concepts.</para>

    <simplesect xml:id="initial-instance-state">
     <title>Initial State</title>

     <para>The following diagram shows the system state prior to
                launching an instance. The image store fronted by the
                image service, Glance, has some number of predefined
                images. In the cloud there is an available compute
                node with available vCPU, memory and local disk
                resources. Plus there are a number of predefined
                volumes in the nova-volume service.</para>

     <figure xml:id="initial-instance-state-figure">
       <title>Base image state with no running instances</title>
       <mediaobject>
	 <imageobject>
	   <imagedata fileref="figures/instance-life-1.png"/>
	 </imageobject>
       </mediaobject>
     </figure>
     </simplesect>

    <simplesect xml:id="running-instance-state">
     <title>Launching an instance</title>

     <para>To launch an instance the user selects an image, a flavor
     and optionally other attributes.  In this case the selected
     flavor provides a root volume (as all flavors do) labeled vda in
     the diagram and additional ephemeral storage labeled vdb in the
     diagram.  The user has also opted to map a volume from the
     nova-volume store to the third virtual disk, vdc, on this
     instance.</para>

     <figure xml:id="running-instance-state-figure">
       <title>Instance creation from image and run time state</title>
       <mediaobject>
	 <imageobject>
	   <imagedata fileref="figures/instance-life-2.png"/>
	 </imageobject>
       </mediaobject>
     </figure>

     <para>The OpenStack system copies the base image from the image
                store to local disk which is used as the first disk of
                the instance (vda), having small images will result in
                faster start up of your instances as less data needs
                to be copied across the network. The system also
                creates a new empty disk image to present as the
                second disk (vdb). The compute node attaches to the
                requested nova-volume using iSCSI and maps this to the
                third disk (vdc) as requested. The vCPU and memory
                resources are provisioned and the instance is booted
                from the first dive. The instance runs and changes
                data on the disks indicated in red in the
                diagram.</para>

     <para>There are many possible variations in the details of the
     scenario, particularly in terms of what the backing storage is
     and the network protocols used to attach and move storage. One
     variant worth mentioning here is that the ephemeral storage used
     for volumes vda and vdb in this example may be backed by network
     storage rather than local disk.  The details are left for later
     chapters.</para>
    
    </simplesect>

    <simplesect xml:id="end-instance-state">
     <title>End State</title>

     <para>Once the instance has served its purpose and is deleted all
                state is reclaimed, except the persistent volume. The
                ephemeral storage is purged. Memory and vCPU resources
                are released. And of course the image has remained
                unchanged through out.</para>

     <figure xml:id="end-instance-state-figure">
       <title>End state of image and volume after instance exits</title>
       <mediaobject>
	 <imageobject>
	   <imagedata fileref="figures/instance-life-3.png"/>
	 </imageobject>
       </mediaobject>
     </figure>
    </simplesect>
  </section>
    <section xml:id="system-architecture">
        <title>System Architecture</title><para>OpenStack Compute consists of several main components. A "cloud controller" contains many of
            these components, and it represents the global state and interacts with all other
            components. An API Server acts as the web services front end for the cloud controller.
            The compute controller provides compute server resources and typically contains the
            compute service, The Object Store component optionally provides storage services. An
            auth manager provides authentication and authorization services when used with the
            Compute system, or you can use the Identity Service (keystone) as a separate
            authentication service. A volume controller provides fast and permanent block-level
            storage for the compute servers. A network controller provides virtual networks to
            enable compute servers to interact with each other and with the public network. A
            scheduler selects the most suitable compute controller to host an instance. </para><para>OpenStack Compute is built on a shared-nothing, messaging-based architecture. You can run all
            of the major components on multiple servers including a compute controller, volume
            controller, network controller, and object store (or image service). A cloud controller
            communicates with the internal object store via HTTP (Hyper Text Transfer Protocol), but
            it communicates with a scheduler, network controller, and volume controller via AMQP
            (Advanced Message Queue Protocol). To avoid blocking each component while waiting for a
            response, OpenStack Compute uses asynchronous calls, with a call-back that gets
            triggered when a response is received.</para>
        
        <para>To achieve the shared-nothing property with multiple copies of the same component, OpenStack Compute keeps all the cloud system state in a database.</para></section>
    <section xml:id="storage-and-openstack-compute">
      <title>Block Storage and OpenStack Compute</title> 

      <para>OpenStack provides two classes of block storage,
      "ephemeral" storage and persistent "volumes".  Ephemeral storage
      exists only for the life of an instance, it will persist across
      reboots of the guest operating system but when the instance is
      deleted so is the associated storage.  All instances have some
      ephemeral storage.  Volumes are persistent virtualized block
      devices independent of any particular instance.  Volumes may be
      attached to a single instance at a time, but may be detached or
      reattached to a different instance while retaining all data,
      much like a USB drive.</para>
      
      <simplesect xml:id="about-ephemeral-storage">
	<title>Ephemeral Storage</title>

	<para>Ephemeral storage is associated with a single unique
	instance.  Its size is defined by the flavor of the
	instance.</para>

	<para>Data on ephemeral storage ceases to exist when the
	instance it is associated with goes away. In the typical use
	case an instance's root filesystem is stored on ephemeral
	storage. This is often an unpleasant surprise for people
	unfamiliar with the cloud model of computing.</para>

	<para>In addition to the ephemeral root volume all flavors
	except the smallest, m1.tiny, provide an additional ephemeral
	block device varying from 20G for the m1.small through 160G
	for the m1.xlarge by default - these sizes are configurable.
	This is presented as a raw block device with no partition
	table or filesystem.  Cloud aware operating system images may
	discover, format, and mount this device.  For example the
	cloud-init package included in Ubuntu's stock cloud images
	will format this space as an ext3 filesystem and mount it on
	/mnt. It is important to note this a feature of the guest
	operating system. OpenStack only provisions the raw
	storage.</para>

      </simplesect>

      <simplesect xml:id="about-persistent-storage">
	<title>Volume Storage</title>

	<para>Volume storage is independent or any particular instance
	and is persistent. Volumes are user created and within quota
	and availability limits may be of any arbitrary size.</para>

	<para>When first created volumes are raw block devices with no
	partition table and no filesystem.  They must be attached to
	an instance to be partitioned and/or formatted.  Once this is
	done they may be used much like an external disk drive.
	Volumes may attached to only one instance at a time, but may
	be detached and reattached to either the same or different
	instances.</para>

	<para>It is possible to configure a volume so that it is
	bootable and provides a persistent virtual instance similar to
	traditional non-cloud based virtualization systems.  In this
	use case the resulting instance may sill have ephemeral
	storage depending on the flavor selected, but the root
	filesystem (and possibly others) will be on the persistent
	volume and thus state will be maintained even if the instance
	it shutdown.  Details of this configuration are discussed in
	the <link linkend="boot-from-volume">Boot From Volume</link>
	section of this manual.</para>

	<para>Volumes do not provide concurrent access from multiple
	instances.  For that you need either a traditional network
	filesystem like NFS or CIFS or a cluster filesystem such as
	GlusterFS.  These may be built within an OpenStack cluster or
	provisioned out side of it, but are not features provided by
	the OpenStack software.</para>

      </simplesect>

    </section>
</chapter>
