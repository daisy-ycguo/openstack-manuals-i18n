<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xml:id="Setting-Up-Python-novaclient"
    version="5.0">
    <title>Setting Up  python-novaclient</title>
<para>For more serious scripting work, you can use a client like the python-novaclient or openstack-compute clients. The python-novaclient implements the Compute 1.1 API while the openstack-compute client works against the Rackspace Cloud Servers public cloud which is the OpenStack Compute 1.0 API. You only need a username and password to use the python-novaclient tool. </para>
    <para>Installing the python-novaclient gives you a <code>nova</code> shell command that enables
    Compute API interactions from the command line. You install the client, and then provide
    your username and password, set as environment variables for convenience, and then you
    can have the ability to send commands to your cloud on the command-line.</para>
    <programlisting>
$ pip install -e git+https://github.com/openstack/python-novaclient.git#egg=python-novaclient
    </programlisting>
    <para>Now that you have installed the python-novaclient, confirm the installation by entering:</para><programlisting>
$ nova help

usage: nova [--debug] [--os_username OS_USERNAME] [--os_password OS_PASSWORD]
            [--os_tenant_name OS_TENANT_NAME] [--os_auth_url OS_AUTH_URL]
            [--os_region_name OS_REGION_NAME] [--service_type SERVICE_TYPE]
            [--service_name SERVICE_NAME] [--endpoint_type ENDPOINT_TYPE]
            [--version VERSION]
            &lt;subcommand&gt; ...
</programlisting>
    <para>In return, you will get a listing of all the commands and
        parameters for the nova command line client. By setting up the
        required parameters as environment variables, you can fly
        through these commands on the command line. You can add
        --os_username on the nova command, or set them as environment
        variables. When using TryStack, you are supplied with an
        endpoint, which the nova client recognizes as the NOVA_URL. On
        TryStack, you can retrieve these environment variables at
        https://trystack.org/dash/api_info/ after logging in.</para>
    <para><programlisting>
export NOVA_USERNAME=facebook12345679       
export NOVA_API_KEY=coolword
export NOVA_PROJECT_ID=facebook12345679       
export NOVA_URL=https://nova-api.trystack.org:5443/v2.0       
export NOVA_VERSION=1.1
</programlisting>
    </para>
    
<section xml:id="Launching-Images-a09140"><title>Listing Images</title><para>Before you can go about the business of building your cloud, you
            want to know what images are available to you by asking
            the image service what kinds of configurations are
            available. The image service could be compared to iTunes
            for your cloud - you can view the playlist of images
            before using your favorite image to create a new instance
            in the cloud. To get the list of images, their names,
            status, and ID, use this command:
            <programlisting>
$ nova image-list

+----+--------------------------------------+--------+--------+
| ID |                 Name                 | Status | Server |
+----+--------------------------------------+--------+--------+
| 12 | natty-server-cloudimg-amd64-kernel   | ACTIVE |        |
| 13 | natty-server-cloudimg-amd64          | ACTIVE |        |
| 14 | oneiric-server-cloudimg-amd64-kernel | ACTIVE |        |
| 15 | oneiric-server-cloudimg-amd64        | ACTIVE |        |
+----+--------------------------------------+--------+--------+
        </programlisting></para>
    <para>Next you need to know the relative sizes of each of these. </para>
    <para><programlisting>
$ nova flavor-list
        
+----+-----------+-----------+------+-----------+------+-------+-------------+
| ID |    Name   | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor |
+----+-----------+-----------+------+-----------+------+-------+-------------+
| 1  | m1.tiny   | 512       | 0    | N/A       | 0    | 1     |             |
| 2  | m1.small  | 2048      | 20   | N/A       | 0    | 1     |             |
| 3  | m1.medium | 4096      | 40   | N/A       | 0    | 2     |             |
| 4  | m1.large  | 8192      | 80   | N/A       | 0    | 4     |             |
| 5  | m1.xlarge | 16384     | 160  | N/A       | 0    | 8     |             |
+----+-----------+-----------+------+-----------+------+-------+-------------+        
    </programlisting></para>
    <para>You can also narrow down the list by using grep to find only
            the Ubuntu 11.04 images with a command like this: </para>
    <para>
        <programlisting>

$ nova image-list | grep 'natty'

| 12 | natty-server-cloudimg-amd64-kernel   | ACTIVE |        |
| 13 | natty-server-cloudimg-amd64          | ACTIVE |        |
</programlisting>
    </para>
    <para>With the information about what is available to you, you can choose the combination of image and flavor to create your virtual servers and launch instances. </para></section>
<section xml:id="Listing-Images-a01518"><title>Launching Instances </title>
    
    <para> To launch a server, you choose an image you want to match
            up to a size, find the ID for the image and the ID for the
            flavor so you can size it, and create the command with the
            IDs. From the information we got previously, we know that
            an Ubuntu Natty image has an ID of 13, and if you want to
            start small with about 2 GB of memory and 20 GB of disk
            space, you'd choose the m1.small flavor which has an ID of
            2 when using the 1.1 API on TryStack. Put those parameters
            in with the "boot" command and you can create a new
            virtual server. <note>
                <para>When using an endpoint that supports 1.1 of the
                    Compute API, you can launch instances with an ID.
                    When using an endpoint that supports v2 of the
                    Compute API, you must use the UUID to launch an
                    instance.</para>
            </note></para>
    <para>
        <programlisting>
 $ nova boot --flavor=2 --image=13 testserver
 
 +-----------+--------------------------------------+
|  Property |                Value                 |
+-----------+--------------------------------------+
| adminPass | ****************                     |
| created   | 2011-09-01T21:40:41Z                 |
| flavor    | m1.small                             |
| hostId    |                                      |
| id        | 1805                                 |
| image     | natty                                |
| metadata  | {}                                   |
| name      | testserver                           |
| progress  | 0                                    |
| status    | BUILD                                |
| updated   | 2011-09-01T21:40:41Z                 |
| uuid      | ce044452-f22e-4ea4-a3ec-d1cde80cf996 |
+-----------+--------------------------------------+
 </programlisting>
    </para>
    <para>Now, you can view this server in your new cloud by using the nova list
        command:<programlisting>
$ nova list
+------+------------+--------+--------------------------------+
|  ID  |    Name    | Status |            Networks            |
+------+------------+--------+--------------------------------+
| 1805 | testserver | ACTIVE | private=10.4.96.81             |
+------+------------+--------+--------------------------------+
            </programlisting></para>
    
    <para>There are three statuses you may see - ACTIVE, BUILDING, and UNKNOWN. The BUILDING status is transient and you likely will not see it. If you see UNKNOWN, run <code>nova list</code> again until it goes away.</para>
    <para>To view all the information about a particular server, use nova show with the ID of the server that you got from the nova list command.</para>
    <programlisting>
$ nova show 1805

+-----------------+----------------------------------------------------------+
|     Property    |                          Value                           |
+-----------------+----------------------------------------------------------+
| created         | 2011-09-01T21:40:41Z                                     |
| flavor          | m1.small                                                 |
| hostId          | 58a7430169aa42cde5ce2456b0cb5bb5ac1ab0703bab6420e8a49e6e |
| id              | 1805                                                     |
| image           | natty                                                    |
| metadata        | {}                                                       |
| name            | testserver                                               |
| private network | 10.4.96.81                                               |
| progress        | 100                                                      |
| status          | ACTIVE                                                   |
| updated         | 2011-09-01T21:40:46Z                                     |
| uuid            | ce044452-f22e-4ea4-a3ec-d1cde80cf996                     |
+-----------------+----------------------------------------------------------+

        </programlisting>
    <para>You can now launch that image again, but add more information to the server when you
        boot it so that you can more easily identify it amongst your ever-growing elastic cloud.
        Use the -meta option with a key=value pair, where you can make up the string for both the
        key and the value. For example, you could add a description and also the creator of the
        server.
        <programlisting>$ nova boot testserver --meta description='Use for testing purposes' --meta creator=joecool</programlisting></para>
</section></section>
