# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: OpenStack Manuals\n"
"POT-Creation-Date: 2012-06-18 17:13+0800\n"
"PO-Revision-Date: 2012-06-20 02:35+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko_KR\n"
"Plural-Forms: nplurals=1; plural=0\n"

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml9(title)
msgid "Programming OpenStack Compute API"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml13(firstname)
msgid "Jacek"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml14(surname)
msgid "Artymiak"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml17(orgname)
msgid "Rackspace"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml20(edition)
msgid "1st"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml22(year)
msgid "2011"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml23(year)
msgid "2012"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml24(holder)
msgid "OpenStack LLC"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml26(releaseinfo)
msgid "1.1"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml27(productname)
msgid "OpenStack Compute"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml28(pubdate)
msgid "2012-03-21"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml31(remark)
msgid "Copyright details are filled in by the template."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml35(para)
msgid ""
"This is a book about programming the OpenStack Compute Nova API, v1.1. It is"
" meant to be read by both programmers and system administrators familiar "
"with programming the Unix shell (Bash, sh) or writing code in the Python "
"programming language. As such it will be of interest to any system "
"administrator and programmer using BSD, Linux, Unix, Mac OS X, and Microsoft"
" Windows operating systems."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml45(title)
msgid "Why Should You Use Cloud Computing?"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml46(para)
msgid ""
"Cloud computing is a way to build flexible server farms that can augment or "
"replace the old-style server farms with their high maintenance cost and "
"inflexible hardware configuration. They make it possible to do the things "
"that are impossible with traditional hardware."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml53(para)
msgid ""
"Thanks to cloud computing, things like replacing Microsoft Windows Server "
"with Linux on 100+ machines; replacing 10 1-core servers with 10 4-core "
"servers; or, doubling the number of the front-end servers to handle the "
"periodic increase in traffic and then taking them off-line when traffic "
"drops off, can be done in a couple of minutes. And since you can rent cloud "
"servers by the hour, you could boot 100 of them to do in one hour a data "
"processing job that would otherwise take one server 100 hours to complete. "
"The price for that job will be the same. Try doing that with your "
"traditional data center! (And don't forget to compare the pricing.)"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml67(title)
msgid "How Will You Manage It All?"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml68(para)
msgid ""
"One of the first things you may think of is how on Earth are you supposed to"
" manage all those computing and storage resources? All cloud computing "
"services providers offer basic web-based control panels, which are good "
"enough as general administration dashboards, but most probably won't meet "
"your needs, if you want to create a dynamically reconfigurable virtual "
"server farm."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml76(para)
msgid ""
"A better way to manage your cloud is via a set of scripts that communicate "
"with your cloud provider's infrastructure. This is done via a Programming "
"Application Interface (API), which is offered by virtually any cloud "
"computing provider."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml82(para)
msgid ""
"The problem with APIs is that there are so many of them. Every cloud "
"provider's infrastructure is different and that fact is reflected in the "
"functionality exposedvia their APIs. Although the fragmentation of the cloud"
" management APIs is genuinely justified, it doesn't make any easier for "
"cloud server farm administrators to deploy their servers on different cloud "
"infrastructures."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml93(title)
msgid "The Solution: OpenStack Compute API"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml94(para)
msgid ""
"Fortunately, you are not alone with this problem. The fanatically helpful "
"people at Rackspace have decided that it would be beneficial for their "
"customers and themselves if they created an open standard for common cloud "
"services along with an accompanying open cloud management API. That was the "
"beginning of the OpenStack project and the OpenStack Compute API. Being "
"open, it can be used by other hosting companies."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml103(para)
msgid ""
"When other cloud computing providers adopt the OpenStack Compute API, you "
"will be able to deploy your servers with different providers using the same "
"set of tools by changing only three pieces of information in your code:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml111(para)
msgid "the URL of the endpoint for the calls to the API;"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml116(para)
msgid "the username of the authorized user;"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml121(para)
msgid "the password of the authorized user."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml126(para)
msgid ""
"From the programmer's point of view, OpenStack Compute API looks like "
"another web API, similar to the Flickr API or the Twitter API—if someone "
"decides to clone the Flickr API you will not have to change anything in your"
" own code. Similarly, if your cloud infrastructure provider offers OpenStack"
" Compute cloud servers, storage, and APIs, you do not have to learn the new "
"ways of doing similar things, you just change the endpoint URL and your user"
" credentials."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml138(title)
msgid "The Basics"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml139(para)
msgid ""
"There are two ways to start learning OpenStack Compute API programming—you "
"can get an account with an OpenStack cloud infrastructure provider or you "
"can download a test virtual machine environment from the OpenStack project's"
" servers by following the instructions published at this URL:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml149(link)
msgid "http://wiki.openstack.org/SingleNodeNovaVagrantChef"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml153(para)
msgid ""
"Please bear in mind that the OpenStack project is moving at a fairly rapid "
"pace and things sometimes don't work or need to be fixed by hand. For "
"example, the trainig environment configuration may have to be adjusted a "
"little. When you hit a snag, ask for help on the OpenStack site."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml163(link)
msgid "http://openstack.org"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml167(para)
msgid ""
"Sometimes you won't have to ask. The OpenStack project is well-documented "
"and you can find all of the necessary information at the following URL:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml175(link)
msgid "http://docs.openstack.org"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml180(title)
msgid "Getting Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml181(para)
msgid ""
"The OpenStack Compute Nova API can be accessed in any programming language. "
"In this book we present examples written in the Python programming languge "
"and if you want to follow them on your own, you will need a Python "
"interpreter."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml187(para)
msgid ""
"Ideally, you should be using the latest Python interpreter from the 2.x "
"branch, which can be any version starting with number 2.6.1 upwards. The "
"Python interpreter does not have to be installed on you virtual server "
"machines, just the ones you will be using to communicate with the OpenStack "
"Compute Application Programming Interface (API)."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml195(para)
msgid "Let's walk through the installation process."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml200(title)
msgid "Installing Python on Your Machine"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml201(para)
msgid ""
"Python is a popular scripting language that ships pre-installed on Mac OS X "
"and some Linux distributions. You can verify if and which version of the "
"Python interpreter you have installed on your system with the following "
"command (must be issued on the command line, do not type the dollar sign):"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml208(screen)
#, no-wrap
msgid ""
"\n"
"$ python --version\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml211(para)
msgid ""
"The version you need is at least 2.6.1. (Please use the latest "
"2.<emphasis>x</emphasis>.<emphasis>x</emphasis> version.)"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml215(para)
msgid ""
"If you are working in a graphical user interface environment and you are not"
" sure how to get to the command line, try the following advice:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml222(para)
msgid ""
"<emphasis role=\"strong\">Linux</emphasis> — click on the toolbar located "
"along one of the edges of the screen and locate the <emphasis "
"role=\"strong\">Terminal</emphasis> menu option in the <emphasis "
"role=\"strong\">Accessories</emphasis> menu. On Ubuntu Linux you will find "
"it in <emphasis>Applications &gt; Accessories &gt; Terminal</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml233(para)
msgid ""
"<emphasis role=\"strong\">Mac OS X</emphasis> — press Ctrl+Space to display "
"the <emphasis role=\"strong\">Spotlight</emphasis> search field. Type "
"<emphasis role=\"strong\">terminal</emphasis> and select the <emphasis "
"role=\"strong\">Terminal</emphasis> application from the list of results."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml243(para)
msgid ""
"<emphasis role=\"strong\">Microsoft Windows</emphasis> — click the <emphasis"
" role=\"strong\">Start</emphasis> menu button, select <emphasis "
"role=\"strong\">Run</emphasis>, type <emphasis "
"role=\"strong\">cmd</emphasis> and hit the Enter/Return key."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml252(para)
msgid ""
"If you do not have Python installed on your system or it is a version "
"earlier than 2.6.1, you will need to add a Python interpreter to your system"
" by hand."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml257(para)
msgid ""
"Python installation packages exist for all popular operating systems, and if"
" you cannot get one for your favorite work environment, you can usually "
"build it from the sources. You can download the Python interpreter binaries "
"or sources from the official Python download page:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml265(link)
msgid "http://www.python.org/getit/"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml267(para)
msgid ""
"If your favorite operating system is not listed on that page, refer to your "
"system's documentation for information on adding external packages. Various "
"variants of Unix have their own packaging systems that make sure the "
"software you install is properly configured on your system. For example, the"
" right way to add Python on Ubuntu Linux is via the <emphasis role=\"strong"
"\">apt-get</emphasis> command:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml276(screen)
#, no-wrap
msgid ""
"\n"
"$ sudo apt-get install python\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml279(para)
msgid ""
"Whenever possible, use pre-made Python 2.<emphasis>x</emphasis> packages. "
"You can always build software from the sources, but it should be your last "
"choice, if you are looking for convenience."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml284(para)
msgid ""
"If you are installing Python on a computer running Microsoft Windows, you "
"may have to add the path to the Python interpreter to the <emphasis "
"role=\"strong\">Path</emphasis> environment variable. On a Microsoft Windows"
" 7 system, you will need to open the <emphasis role=\"strong\">Environment "
"Variables</emphasis> dialog. You can do it in the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml294(para)
msgid "Click the <emphasis role=\"strong\">Start</emphasis> button."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml299(para)
msgid "Right-click the <emphasis role=\"strong\">Computer</emphasis> menu item."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml305(para)
msgid "Select <emphasis role=\"strong\">Properties</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml310(para)
msgid "Select <emphasis role=\"strong\">Advanced System Settings</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml316(para)
msgid ""
"Click the <emphasis role=\"strong\">Environment Variables</emphasis> button."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml322(para)
msgid ""
"Click the <emphasis role=\"strong\">Path</emphasis> entry on the <emphasis "
"role=\"strong\">System Variables</emphasis> list."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml329(para)
msgid "Click the <emphasis role=\"strong\">Edit</emphasis> button."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml334(para)
msgid ""
"Add <emphasis role=\"strong\">;C:26</emphasis> (or <emphasis "
"role=\"strong\">;C:27</emphasis> for Python 2.7.<emphasis>x</emphasis>) to "
"the end of the string shown in the text field of the edit dialog."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml342(para)
msgid "Click the <emphasis role=\"strong\">OK</emphasis> button."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml347(para)
msgid ""
"Please check the real path to the Python interpreter on your system. You can"
" do that by browsing the system disk. Look for the topmost folder/path whose"
" name begins with <emphasis role=\"strong\">Python</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml355(title)
msgid "Examples"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml356(para)
msgid ""
"Examples from this book can be found in the repository found at the "
"following URL:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml363(link)
msgid "http://devguide.net/books/openstackapi"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml367(para)
msgid ""
"Please note that all examples in this book have been written in a way that "
"is meant to explain the concepts and the interactions between your code and "
"the OpenStack Compute API. In real life, you will want to use additional "
"error handling and data processing code."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml376(title)
msgid "Getting the Keys to the Kingdom"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml377(para)
msgid ""
"Depending on the setup you are going to use, there could be three ways to "
"authenticate yourself with an OpenStack Compute v1.1 API:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml384(para)
msgid ""
"Username/password — needs to be given with every call to the OpenStack "
"Compute API. Not very convenient nor secure."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml390(para)
msgid ""
"An authentication token — typically OAuth, but could be any kind of a secret"
" string of bits with an expiry date and time. This is the preferred way to "
"authenticate yourself when calling the OpenStack Compute API. You obtain "
"your authentication token from the authentication server using your username"
" and password, which has to be given only once during the lifetime of the "
"token."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml401(para)
msgid ""
"An API key — works just like the authentication token, but does not have an "
"expiry date/time. You or your OpenStack provider's administrator/support "
"staff can revoke it and generate a new one. It is not as safe as an "
"authentication token, which can have a short lifespan, but at least you "
"don't have to send your username and password with every API call. You don't"
" have to send those credentials at all, in fact."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml413(para)
msgid ""
"When you decide to use the username/password authentication, you will have "
"to send it with every request; when you use a token, you will need to send "
"username/password once and you will get a secret string of bytes which can "
"be reused until it expires on its own or when the OpenStack cloud provider's"
" administrator revokes it. With the API key you do not have to send your "
"username/password credentials, but you are responsible for expiring the key."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml425(title)
msgid "Remembering Basic Security Hygiene"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml426(para)
msgid ""
"Please make sure that the scripts you are pasting your credentials into are "
"not readable by other users because the authentication tokens, the API keys,"
" as well as your username and password are literally the key to your account"
" and with it anyone who gets a hold of it will be able to wreak havoc with "
"your cloud."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml434(para)
msgid ""
"If you suspect that the worst might have happened, revoke the compromised "
"credentials and generate new ones by folowing the instructions provided by "
"your OpenStack cloud provider. It will make all scripts, rouge and "
"legitimate, inoperable, so once you cut them off, you'll need to fix the "
"security holes and then replace the compromised credentials in your scripts "
"with the new ones."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml445(title)
msgid "Getting the Authentication Token"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml446(para)
msgid ""
"In order to obtain an API token you will need to request it from your "
"OpenStack cloud provider's authentication server. Your provider will have to"
" give you the URL of their authentication server as well as your username "
"and password."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml452(para)
msgid ""
"The OpenStack Compute API is implemented using a convention known as "
"\"representational state transfer\" (REST), which is a way of using various "
"HTTP methods (GET, POST, PUT, DELETE) to manage resources described using "
"paths to those resources. It sounds more complex than it is in reality."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml459(para)
msgid ""
"The following example shows how to use the <emphasis "
"role=\"strong\">curl</emphasis> command to obtain the authentication token "
"using the HTTP GET method:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml464(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -d '{\"passwordCredentials\": {\"username\": \"joe\", \"password\": \"shhh\"}}' -H \"Content-type: application/json\" http://localhost:5000/v2.0/tokens\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml469(para)
msgid ""
"<emphasis role=\"strong\">joe</emphasis> — your username, replace <emphasis "
"role=\"strong\">joe</emphasis> without your username, unless it is <emphasis"
" role=\"strong\">joe</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml477(para)
msgid ""
"<emphasis role=\"strong\">shhh</emphasis> — the password for your OpenStack "
"account, please do not use <emphasis role=\"strong\">shhh</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml484(para)
msgid ""
"<emphasis role=\"strong\">localhost:5000</emphasis> — the URL of the "
"authentication server, <emphasis role=\"strong\">localhost</emphasis> is "
"just a placeholder, please use an IP address or a full hostname (e.g. "
"<emphasis>somehost.example.com</emphasis>). Please pay attention to the port"
" number, it does matter. If your provider fails to tell you which port "
"should be used, try <emphasis role=\"strong\">5000</emphasis> and <emphasis "
"role=\"strong\">5001</emphasis> as these are typically used by the OpenStack"
" authentication servers to listen for authentication requests."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml499(para)
msgid ""
"<emphasis role=\"strong\">/v2.0/tokens</emphasis> — the path to the token "
"provider."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml505(para)
msgid ""
"What you will get in return should look like the following stream of code:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml509(screen)
#, no-wrap
msgid ""
"\n"
"{\"auth\": {\"token\": {\"expires\": \"2015-02-05T00:00:00\", \"id\": \"999888777666\"}, \"serviceCatalog\": {\"glance\": [{\"adminURL\": \"http://10.0.2.15:9292/v1\", \"region\": \"RegionOne\", \"internalURL\": \"http://10.0.2.15:9292/v1\", \"publicURL\": \"http://10.0.2.15:9292/v1\"}], \"identity\": [{\"adminURL\": \"http://10.0.2.15:5001/v2.0\", \"region\": \"RegionOne\", \"internalURL\": \"http://10.0.2.15:5000/v2.0\", \"publicURL\": \"http://10.0.2.15:5000/v2.0\"}], \"nova\": [{\"adminURL\": \"http://10.0.2.15:8774/v1.1/openstack\", \"region\": \"RegionOne\", \"internalURL\": \"http://10.0.2.15:8774/v1.1/openstack\", \"publicURL\": \"http://10.0.2.15:8774/v1.1/openstack\"}]}}}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml512(para)
msgid ""
"It is hard to read, so here's the same output formatted for your "
"convenience:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml516(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"auth\": {\n"
"    \"token\": {\n"
"      \"expires\": \"2015-02-05T00:00:00\", \n"
"      \"id\": \"999888777666\"\n"
"    }, \n"
"    \"serviceCatalog\": {\n"
"      \"glance\": [\n"
"        {\n"
"          \"adminURL\": \"http://10.0.2.15:9292/v1\", \n"
"          \"region\": \"RegionOne\", \n"
"          \"internalURL\": \"http://10.0.2.15:9292/v1\", \n"
"          \"publicURL\": \"http://10.0.2.15:9292/v1\"\n"
"        }\n"
"      ], \n"
"      \"nova\": [\n"
"        {\n"
"          \"adminURL\": \"http://10.0.2.15:8774/v1.1/openstack\", \n"
"          \"region\": \"RegionOne\", \n"
"          \"internalURL\": \"http://10.0.2.15:8774/v1.1/openstack\", \n"
"          \"publicURL\": \"http://10.0.2.15:8774/v1.1/openstack\"\n"
"        }\n"
"      ], \n"
"      \"identity\": [\n"
"        {\n"
"          \"adminURL\": \"http://10.0.2.15:5001/v2.0\", \n"
"          \"region\": \"RegionOne\", \n"
"          \"internalURL\": \"http://10.0.2.15:5000/v2.0\", \n"
"          \"publicURL\": \"http://10.0.2.15:5000/v2.0\"\n"
"        }\n"
"      ]\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml552(para)
msgid ""
"The reponse contains the token itself (the <emphasis "
"role=\"strong\">id</emphasis> key in the <emphasis "
"role=\"strong\">token</emphasis> dictionary), the token expiry date/time and"
" the catalog of services you can talk to that accept the token. The catalog "
"lists the names of the services you can access together with their region "
"names, the administration URL, the internal URL and the public URL for each "
"region. Regions are groups of servers, server farms, etc. usually located in"
" the same geogrphical area."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml563(para)
msgid ""
"Each region is represented as a separate dictionary and those dictionaries "
"are items in a list that groups region information for each service. This is"
" an important exception to the overall composition of the JSON response "
"which is arranged in a form of a nested key/value directory."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml570(para)
msgid ""
"Although this is not going to be a frequent occurence in the real world, you"
" may get bitten by server misconfiguration in test environments. If your "
"code extracts the endpoint URLs automatically, and later hangs or starts "
"reporting strange network errors, check if the URLs and port numbers "
"returned by the authentication server match the reality. It is easy to "
"forget to set the right hostname/port. The OpenStack configuration is a "
"fairly complex process and it is easy to get confused. If you get an "
"OpenStack training environment in the form of a VirtualBox or VMware virtual"
" machine, try replacing whatever IP addresses or hostnames are returned by "
"the authentication server with <emphasis "
"role=\"strong\">localhost</emphasis> or run <emphasis "
"role=\"strong\">ifconfig</emphasis> to see which IP addresses have been "
"assigned to the virtual machine."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml588(title)
msgid "What About HTTPS?"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml589(para)
msgid ""
"All calls to the OpenStack Compute API presented in the examples included in"
" this book use unencrypted HTTP connections for the convenience of testing "
"things. In real life you will most likely be using encrypted HTTPS "
"connections, which need some additional care."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml596(para)
msgid ""
"When you want to call your OpenStack provider's API servers you will most "
"likely need to use a secure HTTPS connection. You will recognize it by the "
"<emphasis role=\"strong\">https</emphasis> prefix. If you are given an "
"<emphasis role=\"strong\">http</emphasis> URL, try replacing it with "
"<emphasis role=\"strong\">https</emphasis> and see if that one works."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml605(para)
msgid ""
"If you run into problems with SSL certificates while using <emphasis "
"role=\"strong\">curl</emphasis>, read the instructions published at the "
"following URL:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml613(link)
msgid "http://curl.haxx.se/docs/sslcerts.html"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml617(para)
msgid ""
"Most problems with SSL are caused by SSL certificate misconfiguration on the"
" server side or by the use of self-generated SSL certificates."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml622(para)
msgid "Using HTTPS in Python scripts is explained later in this chapter."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml629(title)
msgid "Using Python to Obtain the Authentication Token"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml630(para)
msgid ""
"When you want to obtain an API token you can do it using two standard Python"
" modules: <emphasis role=\"strong\">httplib</emphasis> and <emphasis "
"role=\"strong\">json</emphasis>. Both are available in all major branches of"
" Python: 2.6.<emphasis>x</emphasis>, 2.7.<emphasis>x</emphasis>, and "
"3.<emphasis>x</emphasis>.<emphasis>x</emphasis>. If you don't like them, you"
" can always use <emphasis role=\"strong\">requests</emphasis> and <emphasis "
"role=\"strong\">simplejson</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml642(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import httplib\n"
"import json\n"
"\n"
"# arguments\n"
"\n"
"## make sure that url is set to the actual hostname/IP address,\n"
"## port number\n"
"\n"
"url = \"192.168.10.1:5000\"\n"
"\n"
"## make sure that osuser is set to your actual username, \"admin\"\n"
"## works for test installs on virtual machines, but it's a hack\n"
"\n"
"osuser = \"joe\"\n"
"\n"
"## use something else than \"shhh\" for you password\n"
"\n"
"ospassword = \"shhh\"\n"
"\n"
"params = '{\"passwordCredentials\":{\"username\":osuser, \"password\":ospassword}}'\n"
"\n"
"headers = {\"Content-Type\": \"application/json\"}\n"
"\n"
"# HTTP connection\n"
"\n"
"conn = httplib.HTTPConnection(url)\n"
"conn.request(\"POST\", \"/v2.0/tokens\", params, headers)\n"
"\n"
"# HTTP response\n"
"\n"
"response = conn.getresponse()\n"
"data = response.read()\n"
"dd = json.loads(data)\n"
"\n"
"conn.close()\n"
"\n"
"apitoken = dd['auth']['token']['id']\n"
"\n"
"print \"Your token is: %s\" % apitoken\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml685(para)
msgid ""
"When you run <emphasis role=\"strong\">gettoken.py</emphasis> you should see"
" the following output (the token will hopefully be different):"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml690(screen)
#, no-wrap
msgid ""
"\n"
"$ python ./gettoken.py\n"
"Your token is: 999888777666\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml696(title)
msgid "Getting the API Endpoint URL"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml697(para)
msgid ""
"The API token is only one essential piece of information you need to know to"
" use the OpenStack Compute API. Another is the URL of the Nova API end "
"point. That's where you will send your calls to the OpenStack Compute API "
"accompanied by the token you just obtained. That information may be given to"
" you by your OpenStack cloud provider or you may be able to extract that "
"information from the authentication server's response:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml706(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import httplib\n"
"import json\n"
"\n"
"# arguments\n"
"\n"
"## change to False when you are using the test environment\n"
"\n"
"usehttps = True\n"
"\n"
"## make sure that url is set to the actual hostname/IP address,\n"
"## port number\n"
"\n"
"url = \"192.168.10.1:5000\"\n"
"\n"
"## make sure that osuser is set to your actual username, \"admin\"\n"
"## works for test installs on virtual machines, but it's a hack\n"
"\n"
"osuser = \"joe\"\n"
"\n"
"## use something else than \"shhh\" for you password\n"
"\n"
"ospassword = \"shhh\"\n"
"\n"
"params = '{\"passwordCredentials\":{\"username\":osuser, \"password\":ospassword}}'\n"
"\n"
"headers = {\"Content-Type\": \"application/json\"}\n"
"\n"
"# HTTP connection\n"
"\n"
"if (usehttps == True):\n"
"    conn = httplib.HTTPSConnection(url, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn = httplib.HTTPConnection(url)\n"
"\n"
"conn.request(\"POST\", \"/v2.0/tokens\", params, headers)\n"
"\n"
"# HTTP response\n"
"\n"
"response = conn.getresponse()\n"
"data = response.read()\n"
"dd = json.loads(data)\n"
"\n"
"conn.close()\n"
"\n"
"apitoken = dd['auth']['token']['id']\n"
"apiurl = dd['auth']['serviceCatalog']['nova'][0]['publicURL']\n"
"\n"
"print \"Your token is: %s\" % apitoken\n"
"print \"Your Nova URL is: %s\" % apiurl\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml759(para)
msgid ""
"When you run that script, you should see the following output. The token "
"will most likely be something different than <emphasis "
"role=\"strong\">999888777666</emphasis> and the Nova URL will not always "
"contain <emphasis role=\"strong\">10.0.2.15</emphasis>:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml766(screen)
#, no-wrap
msgid ""
"\n"
"$ ./gettokenurl.py \n"
"Your token is: 999888777666\n"
"Your Nova URL is: http://10.0.2.15:8774/v1.1/openstack\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml772(title)
msgid ""
"Getting Your Nova Credentials -- The Drop-In Script Snippet for Your Python "
"Scripts"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml774(para)
msgid ""
"You will be coming back to the token and API URL extraction code over and "
"over again, which is why I decided to place it in a separate section of this"
" book. That way I can make the examples shorter and you can focus of the "
"important stuff. Here's the code in all it's glory:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml781(screen)
#, no-wrap
msgid ""
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"### Get OpenStack Credentials\n"
"\n"
"# arguments\n"
"\n"
"## change to False when you are using the test environment\n"
"\n"
"usehttps = True\n"
"\n"
"## make sure that url1 is set to the actual hostname/IP address,\n"
"## port number\n"
"\n"
"url1 = \"localhost:5000\"\n"
"\n"
"## make sure that osuser is set to your actual username, \"admin\"\n"
"## works for test installs on virtual machines, but it's a hack\n"
"\n"
"osuser = \"joe\"\n"
"\n"
"## use something else than \"shhh\" for you password\n"
"\n"
"ospassword = \"shhh\"\n"
"\n"
"params1 = '{\"passwordCredentials\":{\"username\":osuser, \"password\":ospassword}}'\n"
"headers1 = {\"Content-Type\": \"application/json\"}\n"
"\n"
"# HTTP connection #1\n"
"\n"
"if (usehttps == True):\n"
"    # set key_file and cert_file to wherever the key and cert files\n"
"    # are located\n"
"    conn1 = httplib.HTTPSConnection(url1, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn1 = httplib.HTTPConnection(url1)\n"
"\n"
"conn1.request(\"POST\", \"/v2.0/tokens\", params1, headers1)\n"
"\n"
"# HTTP response #1\n"
"\n"
"response1 = conn1.getresponse()\n"
"data1 = response1.read()\n"
"dd1 = json.loads(data1)\n"
"\n"
"conn1.close()\n"
"\n"
"# extract token and url\n"
"\n"
"apitoken = dd1['auth']['token']['id']\n"
"apiurl = dd1['auth']['serviceCatalog']['nova'][0]['publicURL']\n"
"apiurlt = urlparse(dd1['auth']['serviceCatalog']['nova'][0]['publicURL'])\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml840(title)
msgid "Servers"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml841(para)
msgid ""
"Servers are the cornerstone of the OpenStack Compute cloud infrastructure. "
"While the future implementation of OpenStack will most likely offer "
"independent file storage, content delivery networks, or cloud networking "
"components, servers are what we have right now."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml849(title)
msgid "Creating Servers"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml850(para)
msgid ""
"When you create an account with your OpenStack Compute provider you will "
"need to create your servers yourself, either by booting them via a web "
"interface or with an API call. The call to create a server must use the POST"
" method and the body of the request must be a JSON bundle that contains "
"three essential arguments:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml859(para)
msgid "<emphasis role=\"strong\">name</emphasis> — the name of the new server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml865(para)
msgid ""
"<emphasis role=\"strong\">imageRef</emphasis> — the URL of the server image."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml871(para)
msgid ""
"<emphasis role=\"strong\">flavorRef</emphasis> — the URL of the server "
"flavor."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml877(para)
msgid ""
"A short explanation is in order. <emphasis>Flavors</emphasis> contain "
"definitions of the virtual hardware that will be used to run the server "
"system installed from an <emphasis>image</emphasis>. Images can be clean "
"operating systems, or they can be modified by yourself in order to use them "
"as virtual cookie cutters. For example, you could use Ubuntu to configure a "
"web server and save the contents of the filesystem as an image that will be "
"used to create as many additional web servers as necessary. This is faster, "
"easier and more reliable than booting a clean system and configuring it from"
" scratch every time you want to add a new web server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml890(para)
msgid ""
"Images are not tied to any particular virtual hardware flavor. The only "
"limit is the size of the storage and the amount of RAM available for a "
"particular flavor."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml895(para)
msgid ""
"Whenever one of those three components are missing, the OpenStack Compute "
"API will complain with the following messages:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml901(para)
msgid "missing <emphasis role=\"strong\">name</emphasis>"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml906(para)
msgid "You forgot to name the new server:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml909(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"badRequest\": {\n"
"    \"message\": \"Server name is an empty string\", \n"
"    \"code\": 400\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml919(para)
msgid "missing <emphasis role=\"strong\">imageRef</emphasis>"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml924(para)
msgid "You forgot the URL of the server image or used the wrong one:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml927(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"badRequest\": {\n"
"    \"message\": \"Cannot find requested image : Image 0 could not be found.\", \n"
"    \"code\": 400\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml937(para)
msgid "missing <emphasis role=\"strong\">flavorRef</emphasis>"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml942(para)
msgid ""
"You forgot the URL of the virtual machine flavor or used the wrong one:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml946(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"badRequest\": {\n"
"    \"message\": \"Invalid flavorRef provided.\", \n"
"    \"code\": 400\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml954(para)
msgid ""
"The value of <emphasis role=\"strong\">name</emphasis> is easy to figure "
"out, it is what you want to call your server. Typically that would be some "
"sort of a shortcut for a function that the server performs, e.g. when I "
"create web servers using the Tornado Web server, I usually call the hosts "
"<emphasis role=\"strong\">tornado001</emphasis>, <emphasis "
"role=\"strong\">tornado002</emphasis>, etc. or I might call them <emphasis "
"role=\"strong\">web000</emphasis>, <emphasis "
"role=\"strong\">www000</emphasis>, whatever."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml965(para)
msgid ""
"But <emphasis role=\"strong\">imageRef</emphasis> and <emphasis "
"role=\"strong\">flavorRef</emphasis> cannot be just any URL. You need to ask"
" the OpenStack Compute API for the list of images and flavors. That list "
"will contain the URLs accompanied by some additional information that you "
"can use to automate things like switching to a flavor that offers more "
"storage or higher CPU performance."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml975(title)
msgid "Listing Images"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml976(para)
msgid "How do you know what images are available for building new servers?"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml980(para)
msgid ""
"You can list available server images by sending your request to the "
"<emphasis>/images</emphasis> URL using the GET method. The following example"
" shows how it is done using the <emphasis role=\"strong\">curl</emphasis> "
"command:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml986(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -v -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/images \n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml989(para)
msgid ""
"As you can see, you must include the <emphasis role=\"strong\">X-Auth-"
"Token</emphasis> header with a valid token otherwise the OpenStack Compute "
"API will return the <emphasis role=\"strong\">401 Unauthorized</emphasis> "
"error."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml995(para)
msgid ""
"When all goes well, you will get a lump of JSON that looks a bit like this:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml999(screen)
#, no-wrap
msgid ""
"\n"
"{\"images\": [{\"id\": 3, \"links\": [{\"href\": \"http://localhost:8774/v1.1/openstack/images/3\", \"rel\": \"self\"}, {\"href\": \"http://localhost:8774/openstack/images/3\", \"rel\": \"bookmark\"}], \"name\": \"ubuntu-11.04-server\"}, {\"id\": 2, \"links\": [{\"href\": \"http://localhost:8774/v1.1/openstack/images/2\", \"rel\": \"self\"}, {\"href\": \"http://localhost:8774/openstack/images/2\", \"rel\": \"bookmark\"}], \"name\": \"ubuntu-11.04-initrd\"}, {\"id\": 1, \"links\": [{\"href\": \"http://localhost:8774/v1.1/openstack/images/1\", \"rel\": \"self\"}, {\"href\": \"http://localhost:8774/openstack/images/1\", \"rel\": \"bookmark\"}], \"name\": \"ubuntu-11.04-kernel\"}]}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1002(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1167(para)
msgid "Here is a version that is easier to read:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1005(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"images\": [\n"
"    {\n"
"      \"id\": 3, \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/v1.1/openstack/images/3\", \n"
"          \"rel\": \"self\"\n"
"        }, \n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/images/3\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ], \n"
"      \"name\": \"ubuntu-11.04-server\"\n"
"    }, \n"
"    {\n"
"      \"id\": 2, \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/v1.1/openstack/images/2\", \n"
"          \"rel\": \"self\"\n"
"        }, \n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/images/2\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ], \n"
"      \"name\": \"ubuntu-11.04-initrd\"\n"
"    }, \n"
"    {\n"
"      \"id\": 1, \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/v1.1/openstack/images/1\", \n"
"          \"rel\": \"self\"\n"
"        }, \n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/images/1\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ], \n"
"      \"name\": \"ubuntu-11.04-kernel\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1053(para)
msgid ""
"Each item on the <emphasis role=\"strong\">images</emphasis> list represents"
" a single server image. It is a dictionary with three keys:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1060(para)
msgid ""
"<emphasis role=\"strong\">id</emphasis> — the numeric ID of the server "
"image."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1066(para)
msgid ""
"<emphasis role=\"strong\">links</emphasis> — the list of the URLs of the "
"locations where you can find the image."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1072(para)
msgid ""
"<emphasis role=\"strong\">name</emphasis> — a descriptive name of the image."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1078(para)
msgid "Here's how one server image is represented in that response:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1081(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"id\": 1, \n"
"  \"links\": [\n"
"    {\n"
"      \"href\": \"http://localhost:8774/v1.1/openstack/images/1\", \n"
"      \"rel\": \"self\"\n"
"    }, \n"
"    {\n"
"      \"href\": \"http://localhost:8774/openstack/images/1\", \n"
"      \"rel\": \"bookmark\"\n"
"    }\n"
"  ], \n"
"  \"name\": \"ubuntu-11.04-kernel\"\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1097(para)
msgid ""
"Please note that this is not a complete set of information about server "
"images that you can extract using the OpenStack Compute API, but it is "
"enough to create a server unless you are trying to use a freshly created "
"image, which hasn't been activated yet. For more information about handling "
"such cases and how to work with server images in general, read the "
"<emphasis>Images</emphasis> chapter later in this book."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1106(para)
msgid ""
"One question that programmers sometimes ask is which kind of server image "
"identification is more reliable to rely upon, the server image <emphasis "
"role=\"strong\">id</emphasis> or its <emphasis "
"role=\"strong\">name</emphasis>? Personally, I rely on the names of server "
"images, assuming that should some administrative mishap happen and the "
"server image store got reorganized, names are less likely to be altered than"
" the numeric IDs."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1116(para)
msgid ""
"Another argument for using names to identify server images is handling "
"errors and ensuring operational continuity. If you want to make sure that "
"the region or the provider you want to boot your server with has the right "
"server image, you will want to use a unique name instead of a numeric ID, "
"which can differ between OpenStack regions and providers. As always, check "
"and double-check these things in your code. The best strategy is to use "
"automation to create and save same server images in each region and with "
"each OpenStack provider you plan to use. This is necessary, because you "
"cannot transfer server images between OpenStack regions or providers. The "
"automation tool of choice for Python programmers is <emphasis "
"role=\"strong\">Fabric</emphasis>, which you can download from the following"
" site:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1135(link)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1893(link)
msgid "http://fabfile.org"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1141(title)
msgid "Listing Flavors"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1142(para)
msgid ""
"Once you have the server image URL, you will need the URL of the virtual "
"machine flavor. You can list available flavors by sending your request to "
"the <emphasis>/flavors</emphasis> URL using the GET method. The following "
"example shows how it is done using the <emphasis "
"role=\"strong\">curl</emphasis> command:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1150(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -v -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/flavors\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1153(para)
msgid ""
"As with every call you make to the OpenStack Compute API you must include "
"the <emphasis role=\"strong\">X-Auth-Token</emphasis> header with a valid "
"token otherwise the OpenStack Compute API will return the <emphasis "
"role=\"strong\">401 Unauthorized</emphasis> error."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1160(para)
msgid ""
"When all goes well, you will get a JSON string that looks like the one "
"below:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1164(screen)
#, no-wrap
msgid ""
"\n"
"{\"flavors\": [{\"id\": 3, \"links\": [{\"href\": \"http://localhost:8774/v1.1/openstack/flavors/3\", \"rel\": \"self\"}, {\"href\": \"http://localhost:8774/openstack/flavors/3\", \"rel\": \"bookmark\"}], \"name\": \"m1.medium\"}, {\"id\": 4, \"links\": [{\"href\": \"http://localhost:8774/v1.1/openstack/flavors/4\", \"rel\": \"self\"}, {\"href\": \"http://localhost:8774/openstack/flavors/4\", \"rel\": \"bookmark\"}], \"name\": \"m1.large\"}, {\"id\": 1, \"links\": [{\"href\": \"http://localhost:8774/v1.1/openstack/flavors/1\", \"rel\": \"self\"}, {\"href\": \"http://localhost:8774/openstack/flavors/1\", \"rel\": \"bookmark\"}], \"name\": \"m1.tiny\"}, {\"id\": 5, \"links\": [{\"href\": \"http://localhost:8774/v1.1/openstack/flavors/5\", \"rel\": \"self\"}, {\"href\": \"http://localhost:8774/openstack/flavors/5\", \"rel\": \"bookmark\"}], \"name\": \"m1.xlarge\"}, {\"id\": 2, \"links\": [{\"href\": \"http://localhost:8774/v1.1/openstack/flavors/2\", \"rel\": \"self\"}, {\"href\": \"http://localhost:8774/openstack/flavors/2\", \"rel\": \"bookmark\"}], \"name\": \"m1.small\"}]}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1170(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"flavors\": [\n"
"    {\n"
"      \"id\": 3, \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/v1.1/openstack/flavors/3\", \n"
"          \"rel\": \"self\"\n"
"        }, \n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/flavors/3\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ], \n"
"      \"name\": \"m1.medium\"\n"
"    }, \n"
"    {\n"
"      \"id\": 4, \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/v1.1/openstack/flavors/4\", \n"
"          \"rel\": \"self\"\n"
"        }, \n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/flavors/4\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ], \n"
"      \"name\": \"m1.large\"\n"
"    }, \n"
"    {\n"
"      \"id\": 1, \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/v1.1/openstack/flavors/1\", \n"
"          \"rel\": \"self\"\n"
"        }, \n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/flavors/1\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ], \n"
"      \"name\": \"m1.tiny\"\n"
"    }, \n"
"    {\n"
"      \"id\": 5, \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/v1.1/openstack/flavors/5\", \n"
"          \"rel\": \"self\"\n"
"        }, \n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/flavors/5\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ], \n"
"      \"name\": \"m1.xlarge\"\n"
"    }, \n"
"    {\n"
"      \"id\": 2, \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/v1.1/openstack/flavors/2\", \n"
"          \"rel\": \"self\"\n"
"        }, \n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/flavors/2\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ], \n"
"      \"name\": \"m1.small\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1246(para)
msgid ""
"The list of virtual machine flavors is arranged in a way similar to the list"
" of server images. Each item on the <emphasis "
"role=\"strong\">flavors</emphasis> list represents a single virtual machine "
"flavor. It is a dictionary with three keys:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1255(para)
msgid "<emphasis role=\"strong\">id</emphasis> — the numeric ID of the flavor."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1261(para)
msgid ""
"<emphasis role=\"strong\">links</emphasis> — the list of the URLs of the "
"locations where you can find the flavor."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1267(para)
msgid ""
"<emphasis role=\"strong\">name</emphasis> — a descriptve name of the flavor."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1273(para)
msgid "Here's how one virtual machine flavor is represented in that response:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1277(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"id\": 1, \n"
"  \"links\": [\n"
"    {\n"
"      \"href\": \"http://localhost:8774/v1.1/openstack/flavors/1\", \n"
"      \"rel\": \"self\"\n"
"    }, \n"
"    {\n"
"      \"href\": \"http://localhost:8774/openstack/flavors/1\", \n"
"      \"rel\": \"bookmark\"\n"
"    }\n"
"  ], \n"
"  \"name\": \"m1.tiny\"\n"
"}, \n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1295(title)
msgid "Booting a New Server"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1296(para)
msgid ""
"You already know how to obtain the authentication token, the URL of the "
"OpenStack Compute API, and the URLs of both the server image and the flavor."
" You already know all you need to know to make the basic POST request to "
"create a server. We will now create now a Python script that does that job "
"for us. First, we need to obtain the authentication token and the URL of the"
" OpenStack Compute API (aka. <emphasis role=\"strong\">nova</emphasis>):"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1306(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1322(para)
msgid ""
"With the token and the URL we can now ask the OpenStack Compute API server "
"for the image reference:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1326(screen)
#, no-wrap
msgid ""
"\n"
"###\n"
"### Get server image reference\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode({})\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"GET\", \"%s/images\" % apiurlt[2], params2, headers2)\n"
"\n"
"# HTTP response\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
"\n"
"###\n"
"### Server parameters\n"
"###\n"
"\n"
"# Server name\n"
"\n"
"sname = \"tornado001\"\n"
"\n"
"# Server image URL\n"
"\n"
"n = len(dd2[\"images\"])\n"
"m = range(n)\n"
"\n"
"for i in m:\n"
"    if dd2[\"images\"][i][\"id\"] == 1:\n"
"        sImageRef = dd2[\"images\"][i][\"links\"][0][\"href\"]\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1369(para)
msgid "All we need now is the flavor URL:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1372(screen)
#, no-wrap
msgid ""
"\n"
"# Flavor URL\n"
"\n"
"# HTTP connection #3\n"
"\n"
"params3 = urllib.urlencode({})\n"
"headers3 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn3 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn3 = httplib.HTTPConnection(url2)\n"
"\n"
"conn3.request(\"GET\", \"%s/flavors\" % apiurlt[2], params3, headers3)\n"
"\n"
"# HTTP response #3\n"
"\n"
"response3 = conn3.getresponse()\n"
"data3 = response3.read()\n"
"dd3 = json.loads(data3)\n"
"\n"
"conn3.close()\n"
"\n"
"n = len(dd3[\"flavors\"])\n"
"m = range(n)\n"
"\n"
"for i in m:\n"
"    if dd3[\"flavors\"][i][\"id\"] == 1:\n"
"        sFlavorRef = dd3[\"flavors\"][i][\"links\"][0][\"href\"]\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1402(para)
msgid "We can leave other parameters empty for now:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1405(screen)
#, no-wrap
msgid ""
"\n"
"###\n"
"### server metadata\n"
"###\n"
"\n"
"sMetadata = {}\n"
"\n"
"###\n"
"### server personalization\n"
"###\n"
"\n"
"sPersonalityPath = \"\"\n"
"sPersonalityContents = \"\"\n"
"sPersonality = [ { \"path\":sPersonalityPath, \"contents\":base64.b64encode( sPersonalityContents ) } ]\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1420(para)
msgid ""
"All that's left to do is a call to the OpenStack Compute API to create a new"
" server:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1424(screen)
#, no-wrap
msgid ""
"\n"
"s = { \"server\": { \"name\": sname, \"imageRef\": sImageRef, \"flavorRef\": sFlavorRef, \"metadata\": sMetadata, \"personality\": sPersonality } }\n"
"\n"
"sj = json.dumps(s)\n"
"\n"
"# HTTP connection #4\n"
"\n"
"params4 = sj\n"
"headers4 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"conn4 = httplib.HTTPConnection(\"localhost:8774\")\n"
"conn4.request(\"POST\", \"%s/servers\" % apiurlt[2], params4, headers4)\n"
"\n"
"# HTTP response #4\n"
"\n"
"response4 = conn4.getresponse()\n"
"data4 = response4.read()\n"
"dd4 = json.loads(data4)\n"
"\n"
"conn4.close()\n"
"\n"
"print json.dumps(dd4, indent=2)\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1447(para)
msgid ""
"When you run that script, you will get back a JSON string that looks simiar "
"to the one below (shown expanded for better readability):"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1452(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"server\": {\n"
"    \"status\": \"BUILD\", \n"
"    \"updated\": \"2011-12-04T21:18:55Z\", \n"
"    \"hostId\": \"\", \n"
"    \"user_id\": \"admin\", \n"
"    \"name\": \"tornado001\", \n"
"    \"links\": [\n"
"      {\n"
"        \"href\": \"http://localhost:8774/v1.1/openstack/servers/1\", \n"
"        \"rel\": \"self\"\n"
"      }, \n"
"      {\n"
"        \"href\": \"http://localhost:8774/openstack/servers/1\", \n"
"        \"rel\": \"bookmark\"\n"
"      }\n"
"    ], \n"
"    \"created\": \"2011-12-04T21:18:55Z\", \n"
"    \"tenant_id\": \"openstack\", \n"
"    \"image\": {\n"
"      \"id\": \"1\", \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/images/1\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ]\n"
"    }, \n"
"    \"adminPass\": \"MrhcNkNqAeVnnUE7\", \n"
"    \"uuid\": \"8fec45a8-92fb-4840-8f2a-c64e1be49dee\", \n"
"    \"accessIPv4\": \"\", \n"
"    \"metadata\": {\n"
"      \"Server Name\": \"Tornado\"\n"
"    }, \n"
"    \"accessIPv6\": \"\", \n"
"    \"key_name\": null, \n"
"    \"progress\": 0, \n"
"    \"flavor\": {\n"
"      \"id\": \"1\", \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/flavors/1\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ]\n"
"    }, \n"
"    \"config_drive\": \"\", \n"
"    \"id\": 1, \n"
"    \"addresses\": {}\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1505(para)
msgid "Congratulations! You have a new server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1508(para)
msgid ""
"When you create a new server you are going to get a lot of interesting "
"information about it in return:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1514(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2277(para)
msgid ""
"<emphasis role=\"strong\">status</emphasis>: set initially to <emphasis "
"role=\"strong\">BUILD</emphasis>, later set to <emphasis "
"role=\"strong\">ACTIVE</emphasis> when the server is ready to use."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1522(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2285(para)
msgid ""
"<emphasis role=\"strong\">updated</emphasis>: set initially to the server "
"creation date, will be updated every time you modify the server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1529(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2292(para)
msgid "<emphasis role=\"strong\">hostId</emphasis>: undocumented."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1534(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2297(para)
msgid ""
"<emphasis role=\"strong\">user_id</emphasis>: the username of the user who "
"created the server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1540(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2303(para)
msgid ""
"<emphasis role=\"strong\">name</emphasis>: a short server name assigned by "
"whoever created the server (you), in this case it is <emphasis "
"role=\"strong\">tornado001</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1547(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2310(para)
msgid ""
"<emphasis role=\"strong\">links</emphasis>: the URLs pointing to the server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1553(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2316(para)
msgid ""
"<emphasis role=\"strong\">created</emphasis>: set to the server creation "
"date."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1559(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2322(para)
msgid ""
"<emphasis role=\"strong\">tenant_id</emphasis>: the name of the tenant that "
"the server lives with, in this case it's <emphasis "
"role=\"strong\">openstack</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1566(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2329(para)
msgid ""
"<emphasis role=\"strong\">image</emphasis>: basics data information about "
"the operating system image used to build the server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1573(para)
msgid ""
"<emphasis role=\"strong\">adminPass</emphasis>: the initial <emphasis "
"role=\"strong\">root</emphasis>/<emphasis "
"role=\"strong\">Administrator</emphasis> password, set automatically for "
"you. It is possible to change it afterwards."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1581(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2336(para)
msgid ""
"<emphasis role=\"strong\">uuid</emphasis>: the Universally Unique Identifier"
" (UUID) of the server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1587(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2342(para)
msgid ""
"<emphasis role=\"strong\">accessIPv4</emphasis>: the "
"<emphasis>public</emphasis> IPv4 address of the server. You will use it to "
"access your server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1594(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2349(para)
msgid ""
"<emphasis role=\"strong\">metadata</emphasis>: a dictionary that stores "
"server metadata. This can be edited by yourself as explained later in this "
"book."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1601(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2356(para)
msgid ""
"<emphasis role=\"strong\">accessIPv6</emphasis>: the "
"<emphasis>public</emphasis> IPv6 address of the server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1607(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2362(para)
msgid "<emphasis role=\"strong\">key_name</emphasis>: undocumented."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1612(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2367(para)
msgid ""
"<emphasis role=\"strong\">progress</emphasis>: an integer value of 0 through"
" 100. It starts with 0 and increases as the server is getting created. It is"
" usually enough to monitor the <emphasis role=\"strong\">status</emphasis> "
"property of a new server, but if it takes longer than a couple of miutes to "
"build, the <emphasis role=\"strong\">progress</emphasis> indicator can "
"provide additional information that may help debug the problem."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1625(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2380(para)
msgid ""
"<emphasis role=\"strong\">flavor</emphasis>: basic data information about "
"the virtual hardware flavor used to build the server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1632(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2387(para)
msgid "<emphasis role=\"strong\">config_drive</emphasis>: undocumented."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1638(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2393(para)
msgid ""
"<emphasis role=\"strong\">id</emphasis> — the <emphasis "
"role=\"strong\">id</emphasis> of the server within your own OpenStack "
"account realm. The numbering starts with 1."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1648(title)
msgid "Using Curl to Boot a New Server"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1649(para)
msgid ""
"If you want to use <emphasis role=\"strong\">curl</emphasis> to create a new"
" server, this is how you'd structure your request:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1653(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -v -X POST -H \"X-Auth-Token:999888777666\" -H \"Content-type:application/json\" -d '{\"server\": {\"flavorRef\": \"http://localhost:8774/v1.1/openstack/flavors/1\", \"personality\": [{\"path\": \"\", \"contents\": \"\"}], \"name\": \"tornado001\", \"imageRef\": \"http://localhost:8774/v1.1/openstack/images/1\", \"metadata\": {\"Server Name\": \"Tornado\"}}}' http://localhost:8774/v1.1/openstack/servers\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1656(para)
msgid ""
"The result on that request will be a new server, whose description will be "
"similar to the one discussed in the previous section."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1663(title)
msgid "Customizing Your Server: Adding Metadata"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1664(para)
msgid ""
"Short server names like <emphasis role=\"strong\">tornado000</emphasis> may "
"be good enough to describe a small set of servers, but they become "
"insufficient when you need to manage dozens of machines. OpenStack Compute "
"API allows us to add a number of metadata entries to each server at the time"
" of its creation."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1672(para)
msgid ""
"If you go back to the section with the example of using Python to create a "
"new server, you will see the following snippet of code:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1677(screen)
#, no-wrap
msgid ""
"\n"
"...\n"
"\n"
"###\n"
"### server metadata\n"
"###\n"
"\n"
"sMetadata = {}\n"
"\n"
"###\n"
"### server personalization\n"
"###\n"
"\n"
"sPersonalityPath = \"\"\n"
"sPersonalityContents = \"\"\n"
"sPersonality = [ { \"path\":sPersonalityPath, \"contents\":base64.b64encode( sPersonalityContents ) } ]\n"
"\n"
"s = { \"server\": { \"name\": sname, \"imageRef\": sImageRef, \"flavorRef\": sFlavorRef, \"metadata\": sMetadata, \"personality\": sPersonality } }\n"
"\n"
"sj = json.dumps(s)\n"
"\n"
"...\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1700(para)
msgid ""
"Because providing server metadata is optional, the example sets it to an "
"empty dictionary. When you want to add metadata at server creation time, you"
" will need to provide a dictionary of upto 5 key/value pairs. For example, "
"if you wanted to add more information about the Tornado web server you plan "
"to create you could set <emphasis role=\"strong\">sMetadata</emphasis> to "
"something like this:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1710(screen)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1804(screen)
#, no-wrap
msgid ""
"\n"
"...\n"
"\n"
"###\n"
"### server metadata\n"
"###\n"
"\n"
"sMetadata = {\"function\":\"dynamic content\", \"master\":\"no\", \"belongs-to\":\"load balanced group no 1\", \"admin\":\"Joe Speedoo\", \"backup\":\"no\"}\n"
"\n"
"###\n"
"### server personalization\n"
"###\n"
"\n"
"sPersonalityPath = \"\"\n"
"sPersonalityContents = \"\"\n"
"sPersonality = [ { \"path\":sPersonalityPath, \"contents\":base64.b64encode( sPersonalityContents ) } ]\n"
"\n"
"s = { \"server\": { \"name\": sname, \"imageRef\": sImageRef, \"flavorRef\": sFlavorRef, \"metadata\": sMetadata, \"personality\": sPersonality } }\n"
"\n"
"sj = json.dumps(s)\n"
"\n"
"...\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1733(para)
msgid ""
"The keys and values you choose can be anything you like, but it is a good "
"idea to develop a schema that can be reused. For example, in the code "
"fragment shown above, I use <emphasis role=\"strong\">function</emphasis> to"
" store a short description of what the server does; <emphasis "
"role=\"strong\">master</emphasis> to indicate if the server is a copy of the"
" master server or the master server itself; <emphasis role=\"strong"
"\">belongs-to</emphasis> to indicate, which group of load-balanced servers "
"the new machine will belog to; <emphasis role=\"strong\">admin</emphasis> to"
" store the name of the server administrator; and, <emphasis "
"role=\"strong\">backup</emphasis> to indicate if this server needs to be "
"backed up."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1748(para)
msgid ""
"The amount of metadata information assigned to each OpenStack server is "
"currently limited to: 5 keys each holding values no larger than 10240 bytes."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1755(title)
msgid "Customizing Your Server: Adding Custom Files"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1756(para)
msgid "There are three ways of customizing newly created servers:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1761(para)
msgid "log into a server and customize it by hand (not very efficient)."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1767(para)
msgid ""
"create a <link href=\"http://docs.fabfile.org/\">Fabric</link> script and "
"customize it automatically."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1774(para)
msgid ""
"preload server configuration scripts and (optionally) reboot it, wait, test "
"if everything went fine."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1780(para)
msgid ""
"While you have to take care of the first two solutions, OpenStack Compute "
"API can help with the last one. You can write up to 5 files, each no larger "
"than 10KB (10240 bytes) to the freshly installed filesystem. They can be "
"located anywhere, e.g. you could do something trivial like change the "
"contents of <emphasis>/etc/motd</emphasis>, or you could add a system "
"configuration script to <emphasis>/etc/init.d</emphasis> just remember to "
"include logic that does the installation once and not at every reboot, "
"unless that's what you want."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1792(para)
msgid ""
"However you want to use server personalization, you need to put the "
"personalization files into a dictionary whose keys are paths to the files "
"located on the server. Each key has a value, which in this case is the "
"contents of the destination file, which needs to be encoded as Base64."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1799(para)
msgid ""
"To learn how it works in practice, we need to go back to the example showing"
" how to create a new server and focus our attention of the following snippet"
" of code:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1827(para)
msgid ""
"If you carefully examine the value of <emphasis "
"role=\"strong\">sPersonality</emphasis>, you will notice that it is a list "
"of dictionaries with two keys (<emphasis role=\"strong\">path</emphasis> and"
" <emphasis role=\"strong\">contents</emphasis>) each. You can define upto 5 "
"such dictionaries. Here's how you could do it if you wanted to copy to a "
"newly created server 5 local files (their names and locations do not have to"
" match the names and the locations of their destination):"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1838(screen)
#, no-wrap
msgid ""
"\n"
"...\n"
"\n"
"###\n"
"### server metadata\n"
"###\n"
"\n"
"sMetadata = {\"function\":\"dynamic content\", \"master\":\"no\", \"belongs-to\":\"load balanced group no 1\", \"admin\":\"Joe Speedoo\", \"backup\":\"no\"}\n"
"\n"
"###\n"
"### server personalization\n"
"###\n"
"\n"
"sPPath1 = \"/home/joe/.profile\"\n"
"sPContents1F = open('joe.profile')\n"
"sPContents1 = sPContents1F.read()\n"
"sPCont1 = base64.b64encode( sPContents1 )\n"
"\n"
"sPPath2 = \"/etc/motd\"\n"
"sPContents2F = open('joe.motd')\n"
"sPContents2 = sPContents2F.read()\n"
"sPCont2 = base64.b64encode( sPContents2 )\n"
"\n"
"sPPath3 = \"/etc/nginx/nginx.conf\"\n"
"sPContents3F = open('joe.nginx.conf')\n"
"sPContents3 = sPContents3F.read()\n"
"sPCont3 = base64.b64encode( sPContents3 )\n"
"\n"
"sPPath4 = \"/etc/ssh/sshd_config\"\n"
"sPContents4F = open('joe.sshd_config')\n"
"sPContents4 = sPContents4F.read()\n"
"sPCont4 = base64.b64encode( sPContents4 )\n"
"\n"
"sPPath5 = \"/etc/sysctl.conf\"\n"
"sPContents5F = open('joe.sysctl.conf')\n"
"sPContents5 = sPContents5F.read()\n"
"sPCont5 = base64.b64encode( sPContents5 )\n"
"\n"
"sPersonality = [ { \"path\":aPPath1, \"contents\":sPCont1 }, { \"path\":aPPath2, \"contents\":sPCont2 }, { \"path\":aPPath3, \"contents\":sPCont3 }, { \"path\":aPPath4, \"contents\":sPCont4 }, { \"path\":aPPath5, \"contents\":sPCont5 } ]\n"
"\n"
"s = { \"server\": { \"name\": sname, \"imageRef\": sImageRef, \"flavorRef\": sFlavorRef, \"metadata\": sMetadata, \"personality\": sPersonality } }\n"
"\n"
"sj = json.dumps(s)\n"
"\n"
"...\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1884(para)
msgid ""
"What if five files are not enough? You can add more after the server boots. "
"You can do it the hard way using <emphasis role=\"strong\">scp</emphasis> or"
" you can write a Fabric script. Use Fabric. It lives here:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1899(title)
msgid "Server Limits"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1900(para)
msgid ""
"Although cloud-based servers give us a lot of flexibility, they still live "
"in data centers and need to be managed in order to avoid hoarding of the "
"data center resources. This is not a flaw, but the fact of life, even "
"private server clouds have their limits."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1907(para)
msgid ""
"Every OpenStack cloud provider is free to set their own limits, but the ones"
" suggested in the official documentation are:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1914(para)
msgid ""
"<emphasis role=\"strong\">maxTotalRAMSize</emphasis> — total amount of RAM "
"of all active servers: 51200MB (50GB), this could be up to two hundred 256MB"
" instances, or any mixture of other servers."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1922(para)
msgid ""
"<emphasis role=\"strong\">maxServerMeta</emphasis> — maximum number of "
"metadata entries per server: 5."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1928(para)
msgid ""
"<emphasis role=\"strong\">maxImageMeta</emphasis> — maximum number of "
"metadata entries per image: 5."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1934(para)
msgid ""
"<emphasis role=\"strong\">maxPersonality</emphasis> — maximum number of "
"personalisation files per server: 5."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1940(para)
msgid ""
"<emphasis role=\"strong\">maxPersonalitySize</emphasis> — maximum size of "
"each personalization file: 10240 bytes (10KB)."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1950(title)
msgid "Modifying Live Servers"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1951(para)
msgid ""
"Once a server is created, it is by no means set in stone. Apart from the "
"obvious modifications to the operating system you can also modify the "
"virtual hardware, the server's metadata, as well as perform some basic "
"maintenance tasks."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1957(para)
msgid ""
"How you modify the operating system is up to you and up to the ways of the "
"operating system, the rest can be done via the OpenStack Compute API."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1963(title)
msgid "Listing Servers"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1964(para)
msgid "Before you can modify anything, you should have a good look at it."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1968(para)
msgid ""
"When you want to check how many servers you have active, you need to use the"
" GET mthod when you call the <emphasis>/server</emphasis> URL. When you are "
"testing things, use the <emphasis role=\"strong\">curl</emphasis> command to"
" get the raw JSON reply:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1975(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -v -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/servers\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1978(para)
msgid ""
"When you have no active servers, the result will be a dictionary with one "
"key—<emphasis role=\"strong\">servers</emphasis>—whose value is an empty "
"list:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1984(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"servers\": []\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1989(para)
msgid ""
"When there are more servers active, you will see a longer list of all "
"servers that you can manage:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml1993(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"servers\": [\n"
"    {\n"
"      \"id\": 2, \n"
"      \"uuid\": \"fcdeba5b-40f7-4f51-9404-8a41951739b2\", \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/v1.1/openstack/servers/2\", \n"
"          \"rel\": \"self\"\n"
"        }, \n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/servers/2\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ], \n"
"      \"name\": \"tornado002\"\n"
"    }, \n"
"    {\n"
"      \"id\": 1, \n"
"      \"uuid\": \"8fec45a8-92fb-4840-8f2a-c64e1be49dee\", \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/v1.1/openstack/servers/1\", \n"
"          \"rel\": \"self\"\n"
"        }, \n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/servers/1\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ], \n"
"      \"name\": \"tornado001\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2029(para)
msgid ""
"For a better view, here is a single server entry in the <emphasis "
"role=\"strong\">servers</emphasis> list:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2033(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"id\": 1, \n"
"  \"uuid\": \"8fec45a8-92fb-4840-8f2a-c64e1be49dee\", \n"
"  \"links\": [\n"
"    {\n"
"      \"href\": \"http://localhost:8774/v1.1/openstack/servers/1\", \n"
"      \"rel\": \"self\"\n"
"    }, \n"
"    {\n"
"      \"href\": \"http://localhost:8774/openstack/servers/1\", \n"
"      \"rel\": \"bookmark\"\n"
"    }\n"
"  ], \n"
"  \"name\": \"tornado001\"\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2050(para)
msgid ""
"The keys in a dictionary that describes each server have the following "
"meaning:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2056(para)
msgid "<emphasis role=\"strong\">id</emphasis> — the numeric ID of the server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2062(para)
msgid ""
"<emphasis role=\"strong\">uuid</emphasis> — the universally unique "
"identifier of the server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2068(para)
msgid ""
"<emphasis role=\"strong\">links</emphasis> — the list of URLs that point to "
"the server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2074(para)
msgid ""
"<emphasis role=\"strong\">name</emphasis> — a descriptive name of the "
"server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2080(para)
msgid ""
"It is worth poinitng out a few things: the server <emphasis "
"role=\"strong\">id</emphasis> is unique within your account with the "
"OpenStack cloud provider. Other users with the same provider may (and will) "
"have the same server <emphasis role=\"strong\">id</emphasis> numbers. They "
"are assigned in the order of server creation. Similarly, the the value of "
"the <emphasis role=\"strong\">name</emphasis> key does not have to be "
"unique, even within your own account."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2090(para)
msgid ""
"The only unique identifier of your server will be its <emphasis "
"role=\"strong\">uuid</emphasis>. It is assigned automatically by you "
"OpenStack cloud provider's system using an algorithm that is supposed to "
"guarantee that the IDs it creates do not clash. You can read more about "
"UUIDs on Wikipedia:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2101(link)
msgid "http://en.wikipedia.org/wiki/Universally_unique_identifier"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2107(title)
msgid "Listing Servers Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2108(para)
msgid ""
"When you want to use Python to list server information, the procedure is a "
"bit more complex, but you do get access to the items returned by the "
"OpenStack Compute API."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2113(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Get the list of servers\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode({})\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"GET\", \"%s/servers\" % apiurlt[2], params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
"\n"
"print dd2\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2156(para)
msgid ""
"When you want to access specific keys in the dictionary of servers, you will"
" need to either hard-code the paths to specific pieces of information, or "
"use some simple heuristics, e.g. in the following snippet of code I assume "
"that you already have the list of server information:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2163(screen)
#, no-wrap
msgid ""
"\n"
"# abort when there are no servers\n"
"\n"
"if dd2['servers'] == []:\n"
"    print 'Error: No servers found'\n"
"    exit(1)\n"
"\n"
"# iterate through server entries until you find the server by name and\n"
"# then get its ID and URL\n"
"\n"
"dd2r = range(len(dd2['server']))\n"
"\n"
"for n in dd2r:\n"
"    if dd2['servers'][n]['name'] == 'tornado001':\n"
"        print \"Server ID\",\n"
"        print str(dd2['servers'][n]['id'])\n"
"        print \"Server URL\",\n"
"        print dd2['servers'][n]['links'][0]['href']\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2184(title)
msgid "Getting Detailed Server Information"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2185(para)
msgid ""
"A call to <emphasis>/servers</emphasis> returns the list of all servers and "
"can be very long, which is why the JSON response contain only that data "
"which can be used in other calls to update, rebuild, or delete a server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2191(para)
msgid ""
"You can learn much more about a particular server by calling a different "
"URL. It's <emphasis>/server/id</emphasis> where <emphasis "
"role=\"strong\">id</emphasis> is the value of the <emphasis "
"role=\"strong\">id</emphasis> key in the server description. Try it using "
"<emphasis role=\"strong\">curl</emphasis>:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2199(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -v -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/servers/1\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2202(para)
msgid ""
"What you will get in return is a JSON response with a lot more information "
"about server whose <emphasis role=\"strong\">id</emphasis> is set to 1:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2207(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"server\": {\n"
"    \"status\": \"ACTIVE\", \n"
"    \"updated\": \"2011-12-04T21:19:11Z\", \n"
"    \"hostId\": \"ea05d3b6c34b9baae7ad5ce482814e040305b6c8fb67034a46908720\", \n"
"    \"user_id\": \"admin\", \n"
"    \"name\": \"tornado001\", \n"
"    \"links\": [\n"
"      {\n"
"        \"href\": \"http://localhost:8774/v1.1/openstack/servers/1\", \n"
"        \"rel\": \"self\"\n"
"      }, \n"
"      {\n"
"        \"href\": \"http://localhost:8774/openstack/servers/1\", \n"
"        \"rel\": \"bookmark\"\n"
"      }\n"
"    ], \n"
"    \"created\": \"2011-12-04T21:18:55Z\", \n"
"    \"tenant_id\": \"openstack\", \n"
"    \"image\": {\n"
"      \"id\": \"1\", \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/images/1\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ]\n"
"    }, \n"
"    \"uuid\": \"8fec45a8-92fb-4840-8f2a-c64e1be49dee\", \n"
"    \"accessIPv4\": \"\", \n"
"    \"metadata\": {\n"
"      \"Server Name\": \"Tornado\"\n"
"    }, \n"
"    \"accessIPv6\": \"\", \n"
"    \"key_name\": null, \n"
"    \"progress\": 100, \n"
"    \"flavor\": {\n"
"      \"id\": \"1\", \n"
"      \"links\": [\n"
"        {\n"
"          \"href\": \"http://localhost:8774/openstack/flavors/1\", \n"
"          \"rel\": \"bookmark\"\n"
"        }\n"
"      ]\n"
"    }, \n"
"    \"config_drive\": \"\", \n"
"    \"id\": 1, \n"
"    \"addresses\": {\n"
"      \"public\": [\n"
"        {\n"
"          \"version\": 4, \n"
"          \"addr\": \"192.168.100.2\"\n"
"        }\n"
"      ], \n"
"      \"private\": [\n"
"        {\n"
"          \"version\": 4, \n"
"          \"addr\": \"192.168.200.2\"\n"
"        }\n"
"      ]\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2272(para)
msgid "Here is a guide to all those tasty bits of information:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2401(para)
msgid ""
"The list show above is almost an exact copy of the list shown in the chapter"
" on server creation. One missing field is <emphasis "
"role=\"strong\">adminPass</emphasis>, which is never returned after the "
"server starts. This is done for security reasons. If you want to change the "
"server <emphasis role=\"strong\">root</emphasis>/<emphasis "
"role=\"strong\">Administrator</emphasis> password, you need to do it via the"
" web interface or using a special OpenStack Compute API call."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2413(title)
msgid "Getting Detailed Server Information Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2414(para)
msgid ""
"What if you want to get all details of a particular server using Python? "
"Here's how you do it:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2418(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Get the full description of a server\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"servID = 1      # server ID\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode({})\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"GET\", \"%s/servers/%s\" % (apiurlt[2], servID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
"\n"
"print dd2\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2465(title)
msgid "Listing Server Addresses"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2466(para)
msgid ""
"One piece of information that is looked up more often than others is server "
"IP address. Or addresses, as is the case with all OpenStack Compute servers."
" Each machine has at least two IPv4 addresses: one private and one public "
"(aka. routable). It is also reasonable to assume that each server will have "
"its own private and public IPv6 address."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2474(para)
msgid ""
"You can list them using a GET request for the "
"<emphasis>/servers/id/ips</emphasis> URL. For example, if you were to use "
"<emphasis role=\"strong\">curl</emphasis> to list the IP addresses of a "
"server whose <emphasis role=\"strong\">id</emphasis> is 1, you'd do it in "
"the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2482(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -v -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/servers/1/ips\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2485(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2601(para)
msgid ""
"What you will get in return will be a JSON response similar to the one "
"below:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2489(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"addresses\": {\n"
"    \"public\": [\n"
"      {\n"
"        \"version\": 4, \n"
"        \"addr\": \"192.168.100.2\"\n"
"      },\n"
"      {\n"
"        \"version\": 6, \n"
"        \"addr\": \"fe80:0:0:0:0:0:c0a8:6402\"\n"
"      }\n"
"    ], \n"
"    \"private\": [\n"
"      {\n"
"        \"version\": 4, \n"
"        \"addr\": \"192.168.200.2\"\n"
"      },\n"
"      {\n"
"        \"version\": 6, \n"
"        \"addr\": \"fe80:0:0:0:0:0:c0a8:6402\"\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2515(para)
msgid ""
"The <emphasis role=\"strong\">addresses</emphasis> dictionary contains two "
"lists: <emphasis role=\"strong\">private</emphasis> and <emphasis "
"role=\"strong\">public</emphasis>. These lists hold IPv4 and IPv6 addresses "
"assigned to the server on private and public networks. The number of "
"addresses asigned to your server may vary, but there should be at least one "
"private IPv4 and one public IPv4 address."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2526(title)
msgid "Listing Server Addresses Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2527(para)
msgid ""
"When you want to extract the list of IP addresses for a server using Python,"
" use the following recipe as your starting point:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2531(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Get the list of server IP addresses\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"srvID = 1       # server ID number\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode({})\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"GET\", \"%s/servers/%s/ips\" % (apiurlt[2], srvID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
"\n"
"print dd2\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2575(para)
msgid ""
"If you want to access a specific address you need to use a dictionary/list "
"access notation, e.g. if you want to print the first public IPv4 address:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2580(screen)
#, no-wrap
msgid ""
"\n"
"ipAddr = dd2[\"addresses\"][\"public\"][0]\n"
"\n"
"if (ipAddr[\"version\"] == 4):\n"
"    print ipAddr[\"addr\"]\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2588(title)
msgid "Listing Network-Specific Server Addresses"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2589(para)
msgid ""
"It is possible to request just private or public server addresses. You can "
"list them using a GET request for the "
"<emphasis>/servers/id/ips/network</emphasis> URL. For example, if you were "
"to use <emphasis role=\"strong\">curl</emphasis> to list the public IP "
"addresses of a server whose <emphasis role=\"strong\">id</emphasis> is 1, "
"you'd do it in the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2598(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -v -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/servers/1/ips/public\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2605(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"addresses\": {\n"
"    \"public\": [\n"
"      {\n"
"        \"version\": 4, \n"
"        \"addr\": \"192.168.100.2\"\n"
"      },\n"
"      {\n"
"        \"version\": 6, \n"
"        \"addr\": \"fe80:0:0:0:0:0:c0a8:6402\"\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2623(title)
msgid "Listing Network-Specific Server Addresses Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2625(para)
msgid "Network-specific IP addresses can be retrieved using a Python script:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2629(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Get the list of server IP addresses for a specific network\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"srvID = 1       # server ID number\n"
"networkName = \"public\"  # can be either \"public\" or \"private\"\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode({})\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"GET\", \"%s/servers/%s/ips/%s\" % (apiurlt[2], srvID, networkName), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
"\n"
"print dd2\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2677(title)
msgid "Server Metadata"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2678(para)
msgid ""
"Server metadata is stored in the <emphasis "
"role=\"strong\">metadata</emphasis> dictionary within the server description"
" data structures. We already discussed adding metadata during server "
"creation, now we'll see how to list, add, update, and delete metadata items "
"associated with your servers."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2686(title)
msgid "Listing Server Metadata"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2687(para)
msgid ""
"It is possible to access server metadata information without having to list "
"all properties of the server. For example, if you want to use <emphasis "
"role=\"strong\">curl</emphasis> to list metadata for a server whose "
"<emphasis role=\"strong\">id</emphasis> is 1, you can do it in the following"
" way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2695(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/servers/1/metadata\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2698(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2786(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3157(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3245(para)
msgid "The result should look similar to the output shown below:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2701(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"metadata\": {\n"
"    \"Server Name\": \"Tornado\"\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2708(para)
msgid ""
"Notice that the GET method must be applied to the URL that ends with the "
"<emphasis>/servers/id/metadata</emphasis> path."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2714(title)
msgid "Lisitng Server Metadata Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2715(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3174(para)
msgid ""
"When you'd rather use Python to access metadata information, you could do it"
" in the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2719(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Get server metadata\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"servID = 1      # server ID\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode({})\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"GET\", \"%s/servers/%s/metadata\" % (apiurlt[2], servID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
"\n"
"print dd2\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2765(title)
msgid "Listing Server Metadata Items"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2766(para)
msgid ""
"Using the <emphasis>/servers/id/metadata</emphasis> URI gets you the "
"dictionary of all metadata keys. If you wanted to access a specific key, you"
" can use a four-part URI, <emphasis>/servers/id/metadata/key</emphasis>, "
"where <emphasis>id</emphasis> is the numeric <emphasis "
"role=\"strong\">id</emphasis> of the server and <emphasis>key</emphasis> is "
"the metadata key you want the value of."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2776(para)
msgid ""
"For example, if you want to get the value of the <emphasis "
"role=\"strong\">owner</emphasis> metadata key for server whose <emphasis "
"role=\"strong\">id</emphasis> is 1, you can do it using <emphasis "
"role=\"strong\">curl</emphasis> in the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2783(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/servers/1/metadata/owner\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2789(screen)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2915(screen)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3248(screen)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3374(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"metadata\": {\n"
"    \"owner\": \"joe\"\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2798(title)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3257(title)
msgid "Listing Server Metadata Items Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2799(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3258(para)
msgid ""
"If you wanted to check for a particular metadata key, you can reuse the "
"Python script from the previous section. You already have the metadata "
"dictionary, and all that's left is retrieving the key you are looking for:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2805(screen)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3264(screen)
#, no-wrap
msgid ""
"\n"
"print dd2['metadata']['owner']\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2810(title)
msgid "Setting Server Metadata"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2811(para)
msgid ""
"Server metadata is stored in the <emphasis "
"role=\"strong\">metadata</emphasis> dictionary, which is a part of each "
"image description. It doesn't have to be set to anything, but it is often "
"used to add a more detailed description of the image's purpose than a terse "
"<emphasis role=\"strong\">name</emphasis> of the image."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2819(para)
msgid ""
"Server metadata can be set at server creation time or later. When you want "
"to do it after you create your server, you need to use the PUT method and a "
"URL with a three-part path, <emphasis>/servers/id/metadata</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2825(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2987(para)
msgid ""
"The <emphasis>id</emphasis> part is the numeric <emphasis "
"role=\"strong\">id</emphasis> of the server. For example, if you wanted to "
"set the <emphasis role=\"strong\">owner</emphasis> metadata key of the "
"server whose <emphasis role=\"strong\">id</emphasis> is 1, the path would be"
" <emphasis>/servers/1/metadata</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2833(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2922(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2995(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3067(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3292(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3381(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3454(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3526(para)
msgid ""
"If you were to use <emphasis role=\"strong\">curl</emphasis> to set metadata"
" keys, this is how you'd do it:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2837(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -X PUT -H \"X-Auth-Token:999888777666\" -H \"Accept: application/json\" -d '{\"metadata\":{\"owner\":\"joe\",\"group\":\"www\"}}' http://localhost:8774/v1.1/openstack/servers/1/metadata\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2842(title)
msgid "Setting Server Metadata Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2843(para)
msgid ""
"When you want to use Python to set server metadata, you could do it in the "
"following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2847(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Set server metadata\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"servID = 1      # server ID\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"metadata\":{\"owner\":\"joe\",\"group\":\"www\"}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Accept\":\"application/json\", \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"PUT\", \"%s/servers/%s/metadata\" % (apiurlt[2], servID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2891(title)
msgid "Setting Server Metadata Items"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2892(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3351(para)
msgid ""
"In the previous section you learned how to set multiple metadata items in "
"one go. But what if you wanted to set them one at a time?"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2897(para)
msgid ""
"Once again, you need to use the PUT method and a URI that points to the "
"metadata you wish to set, e.g. "
"<emphasis>/servers/id/metadata/key</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2902(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3059(para)
msgid ""
"The <emphasis>id</emphasis> part is the numeric <emphasis "
"role=\"strong\">id</emphasis> of the server. For example, if you wanted to "
"set the <emphasis role=\"strong\">owner</emphasis> metadata key of the "
"server whose <emphasis role=\"strong\">id</emphasis> is 1, the path would be"
" <emphasis>/servers/1/metadata/owner</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2910(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3369(para)
msgid ""
"The value of the key set has to be passed to the OpenStack Compute API "
"server as a single-key <emphasis role=\"strong\">metadata</emphasis> "
"dictionary:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2926(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -X PUT -H \"X-Auth-Token:999888777666\" -H \"Accept: application/json\" -d '{\"metadata\":{\"owner\":\"joe\"}}' http://localhost:8774/v1.1/openstack/servers/1/metadata/owner\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2931(title)
msgid "Setting Server Metadata Items Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2932(para)
msgid ""
"When you want to use Python to set server metadata items, you can do it in "
"the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2936(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Set server metadata\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"servID = 1      # server ID\n"
"metaKey = \"owner\"   # metadata key\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"metadata\":{metaKey:\"joe\"}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Accept\":\"application/json\", \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"PUT\", \"%s/servers/%s/metadata/%s\" % (apiurlt[2], servID, metaKey), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2981(title)
msgid "Updating Server Metadata"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2982(para)
msgid ""
"If you want to update an existing metadata key, you need to use the POST "
"method and the same, three-part URL path, "
"<emphasis>/servers/id/metadata</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml2999(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -X POST -H \"X-Auth-Token:999888777666\" -H \"Accept: application/json\" -d '{\"metadata\":{\"owner\":\"adam\"}}' http://localhost:8774/v1.1/openstack/servers/1/metadata\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3004(title)
msgid "Updating Server Metadata Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3005(para)
msgid ""
"When you want to use Python to update server metadata, you could do it in "
"the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3009(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Update server metadata\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"servID = 1      # server ID\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"metadata\":{\"owner\":\"adam\"}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Accept\":\"application/json\", \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"POST\", \"%s/servers/%s/metadata\" % (apiurlt[2], servID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3053(title)
msgid "Deleting Server Metadata Items"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3054(para)
msgid ""
"When you want to delete an existing metadata item, you will need to use the "
"DELETE method and the four-part URI, "
"<emphasis>/servers/id/metadata/key</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3071(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -X DELETE -H \"X-Auth-Token:999888777666\" -H \"Accept: application/json\" http://localhost:8774/v1.1/openstack/servers/1/metadata/owner\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3074(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3533(para)
msgid ""
"Please note there is no data payload in a delete operation. It is a common "
"mistake to leave it in while editing scripts."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3080(title)
msgid "Deleting Server Metadata Items Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3081(para)
msgid ""
"Deleting server metadata items using Python can be done in the way shown "
"below:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3085(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Deleting server metadata items\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"servID = 1      # server ID\n"
"metaKey = \"owner\"   # metadata key\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"metadata\":{\"owner\":\"adam\"}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Accept\":\"application/json\", \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"DELETE\", \"%s/servers/%s/metadata/%s\" % (apiurlt[2], servID, metaKey), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3131(title)
msgid "Server Image Metadata"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3132(para)
msgid ""
"Server image metadata is not the same as the server image data, but the way "
"you use it, modify it, or delete it is very similar."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3136(para)
msgid ""
"Server image metadata is stored in the <emphasis "
"role=\"strong\">metadata</emphasis> dictionary within the server image "
"description data structures. We already discussed adding metadata during "
"server image ### FIXME ### creation, now we'll see how to list, add, update,"
" and delete metadata items associated with your server images."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3145(title)
msgid "Listing Server Image Metadata"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3146(para)
msgid ""
"It is possible to access server image metadata information without having to"
" list all properties of the server image. For example, if you want to use "
"<emphasis role=\"strong\">curl</emphasis> to list metadata for a server "
"image whose <emphasis role=\"strong\">id</emphasis> is 1, you can do it in "
"the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3154(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/images/1/metadata\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3160(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"metadata\": {\n"
"    \"imageName\": \"App Server\"\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3167(para)
msgid ""
"Notice that the GET method must be applied to the URL that ends with the "
"<emphasis>/images/id/metadata</emphasis> path."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3173(title)
msgid "Lisitng Server Image Metadata Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3178(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Get server image metadata\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"imgID = 1       # server image ID\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode({})\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"GET\", \"%s/images/%s/metadata\" % (apiurlt[2], imgID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
"\n"
"print dd2\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3224(title)
msgid "Listing Server Image Metadata Items"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3225(para)
msgid ""
"Using the <emphasis>/images/id/metadata</emphasis> URI gets you the "
"dictionary of all metadata keys. If you wanted to access a specific key, you"
" can use a four-part URI, <emphasis>/images/id/metadata/key</emphasis>, "
"where <emphasis>id</emphasis> is the numeric <emphasis "
"role=\"strong\">id</emphasis> of the server image and "
"<emphasis>key</emphasis> is the metadata key you want the value of."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3235(para)
msgid ""
"For example, if you want to get the value of the <emphasis "
"role=\"strong\">owner</emphasis> metadata key for server image whose "
"<emphasis role=\"strong\">id</emphasis> is 1, you can do it using <emphasis "
"role=\"strong\">curl</emphasis> in the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3242(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/images/1/metadata/owner\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3269(title)
msgid "Setting Server Image Metadata"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3270(para)
msgid ""
"Server image metadata is stored in the <emphasis "
"role=\"strong\">metadata</emphasis> dictionary, which is a part of each "
"image description. It doesn't have to be set to anything, but it is often "
"used to add a more detailed description of the image's purpose than a terse "
"<emphasis role=\"strong\">name</emphasis> of the image."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3278(para)
msgid ""
"Server image metadata can be set at server image creation time or later. "
"When you want to do it after you create your server image, you need to use "
"the PUT method and a URL with a three-part path, "
"<emphasis>/images/id/metadata</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3284(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3446(para)
msgid ""
"The <emphasis>id</emphasis> part is the numeric <emphasis "
"role=\"strong\">id</emphasis> of the server image. For example, if you "
"wanted to set the <emphasis role=\"strong\">owner</emphasis> metadata key of"
" the server image whose <emphasis role=\"strong\">id</emphasis> is 1, the "
"path would be <emphasis>/images/1/metadata</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3296(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -X PUT -H \"X-Auth-Token:999888777666\" -H \"Accept: application/json\" -d '{\"metadata\":{\"owner\":\"joe\",\"group\":\"www\"}}' http://localhost:8774/v1.1/openstack/images/1/metadata\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3301(title)
msgid "Setting Server Image Metadata Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3302(para)
msgid ""
"When you want to use Python to set server image metadata, you could do it in"
" the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3306(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Set server image metadata\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"imgID = 1       # server image ID\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"metadata\":{\"owner\":\"joe\",\"group\":\"www\"}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Accept\":\"application/json\", \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"PUT\", \"%s/images/%s/metadata\" % (apiurlt[2], imgID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3350(title)
msgid "Setting Server Image Metadata Items"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3356(para)
msgid ""
"Once again, you need to use the PUT method and a URI that points to the "
"metadata you wish to set, e.g. <emphasis>/images/id/metadata/key</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3361(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3518(para)
msgid ""
"The <emphasis>id</emphasis> part is the numeric <emphasis "
"role=\"strong\">id</emphasis> of the server image. For example, if you "
"wanted to set the <emphasis role=\"strong\">owner</emphasis> metadata key of"
" the server image whose <emphasis role=\"strong\">id</emphasis> is 1, the "
"path would be <emphasis>/images/1/metadata/owner</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3385(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -X PUT -H \"X-Auth-Token:999888777666\" -H \"Accept: application/json\" -d '{\"metadata\":{\"owner\":\"joe\"}}' http://localhost:8774/v1.1/openstack/images/1/metadata/owner\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3390(title)
msgid "Setting Server Image Metadata Items Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3391(para)
msgid ""
"When you want to use Python to set server image metadata items, you can do "
"it in the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3395(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Set server image metadata\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"imgID = 1       # server image ID\n"
"metaKey = \"owner\"   # metadata key\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"metadata\":{metaKey:\"joe\"}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Accept\":\"application/json\", \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"PUT\", \"%s/image/%s/metadata/%s\" % (apiurlt[2], imgID, metaKey), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3440(title)
msgid "Updating Server Image Metadata"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3441(para)
msgid ""
"If you want to update an existing metadata key, you need to use the POST "
"method and the same, three-part URL path, "
"<emphasis>/images/id/metadata</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3458(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -X POST -H \"X-Auth-Token:999888777666\" -H \"Accept: application/json\" -d '{\"metadata\":{\"owner\":\"adam\"}}' http://localhost:8774/v1.1/openstack/images/1/metadata\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3463(title)
msgid "Updating Server Image Metadata Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3464(para)
msgid ""
"When you want to use Python to update server image metadata, you could do it"
" in the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3468(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Update server image metadata\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"imgID = 1       # server image ID\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"metadata\":{\"owner\":\"adam\"}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Accept\":\"application/json\", \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"POST\", \"%s/images/%s/metadata\" % (apiurlt[2], imgID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3512(title)
msgid "Deleting Server Image Metadata Items"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3513(para)
msgid ""
"When you want to delete an existing metadata item, you will need to use the "
"DELETE method and the four-part URI, "
"<emphasis>/images/id/metadata/key</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3530(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -X DELETE -H \"X-Auth-Token:999888777666\" -H \"Accept: application/json\" http://localhost:8774/v1.1/openstack/images/1/metadata/owner\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3539(title)
msgid "Deleting Server Image Metadata Items Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3540(para)
msgid ""
"Deleting server image metadata items using Python can be done in the way "
"shown below:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3544(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Deleting server image metadata items\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"imgID = 1       # server image ID\n"
"metaKey = \"owner\"   # metadata key\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"metadata\":{\"owner\":\"adam\"}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Accept\":\"application/json\", \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"DELETE\", \"%s/images/%s/metadata/%s\" % (apiurlt[2], imgID, metaKey), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3589(title)
msgid "Updating Servers: Changing Server Name"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3590(para)
msgid ""
"Contrary to what some users of cloud server think, it is not necessary to "
"delete a server and create a new one when you want to change something about"
" it. Some small modifications, like changing server name or server access "
"address can be done without such drastic measures."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3597(para)
msgid ""
"If you want to change the server name, you will need to use a PUT request "
"directed at <emphasis>/servers/id</emphasis>, where <emphasis "
"role=\"strong\">id</emphasis> is the numeric ID of the server you wish to "
"update. You need to include a JSON payload:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3603(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"server\" : {\n"
"    \"name\" : \"nginx000\"\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3610(para)
msgid ""
"If you were to use <emphasis role=\"strong\">curl</emphasis> to change the "
"server name, this is how you can do it:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3614(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -X PUT -H \"X-Auth-Token:999888777666\" -H \"Accept: application/json\" -d '{\"server\": {\"name\": \"nginx000\"}}' http://localhost:8774/v1.1/openstack/servers/1\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3617(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3694(para)
msgid ""
"The response to this request will be a long JSON string similar to the one "
"you get when you create a new server."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3623(title)
msgid "Updating Servers: Changing Server Name Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3624(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Changing server name\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"imgID = 1       # server image ID\n"
"srvName = \"nginx000\"    # server name\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"server\": {\"name\":srvName}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Accept\":\"application/json\", \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"DELETE\", \"%s/servers/%s\" % (apiurlt[2], imgID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
"\n"
"print dd2\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3671(title)
msgid "Updating Servers: Changing Server Access Address"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3672(para)
msgid ""
"If you want to change server access IPv4 and/or IPv6, you can do it using a "
"PUT request directed at <emphasis>/servers/id</emphasis>, where <emphasis "
"role=\"strong\">id</emphasis> is the numeric ID of the server you wish to "
"update. You need to include a JSON payload:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3679(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"server\" : {\n"
"    \"accessIPv4\" : \"192.168.100.2\",\n"
"    \"accessIPv6\" : \"fe80:0:0:0:0:0:c0a8:6402\"\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3687(para)
msgid ""
"If you were to use <emphasis role=\"strong\">curl</emphasis> to change the "
"server access addresses, this is how you can do it:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3691(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -X PUT -H \"X-Auth-Token:999888777666\" -H \"Accept: application/json\" -d '{\"server\": {\"accessIPv4\": \"192.168.100.2\", \"accessIPv6\": \"fe80:0:0:0:0:0:c0a8:6402\"}}' http://localhost:8774/v1.1/openstack/servers/1\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3700(title)
msgid "Updating Servers: Changing Server Access Address Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3702(para)
msgid ""
"If you want to use Python to change server access IP addresses, you could "
"start with the following script:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3706(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Changing server name\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"imgID = 1               # server image ID\n"
"srvIPv4 = \"192.168.100.2\"       # server access IPv4\n"
"srvIPv6 = \"fe80:0:0:0:0:0:c0a8:6402\"    # server access IPv6\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"server\": {\"accessIPv4\": srvIPv4, \"accessIPv6\": srvIPv6}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Accept\":\"application/json\", \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"DELETE\", \"%s/servers/%s\" % (apiurlt[2], imgID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
"\n"
"print dd2\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3754(title)
msgid "Changing Root (Administrator) Password"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3755(para)
msgid ""
"The <emphasis role=\"strong\">root</emphasis> (<emphasis "
"role=\"strong\">Administrator</emphasis>) password is the most important of "
"all passwords on any server. You should never log in as <emphasis "
"role=\"strong\">root</emphasis> or <emphasis "
"role=\"strong\">Administrator</emphasis>, but you sometimes have to do it "
"for basic initial administrative tasks like adding users, setting up "
"<emphasis role=\"strong\">sudo</emphasis> priviledges, etc. Your cloud "
"infrastructure provider will most likely provide a web interface for "
"changing the <emphasis role=\"strong\">root</emphasis> password, but you can"
" also do it via the OpenStack Compute API."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3769(para)
msgid ""
"What you need to do is use a POST request directed at "
"<emphasis>/servers/id/action</emphasis>, where <emphasis "
"role=\"strong\">id</emphasis> is the numeric server ID. You also need to "
"include a payload with the description of the action you want to perform on "
"your server (<emphasis role=\"strong\">changePassword</emphasis>), the "
"parameters of those actions, and their values. It has to be a JSON "
"dictionary structure:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3779(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"changePassword\" : {\n"
"    \"adminPass\" : \"dontusesshhhforpassword\"\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3786(para)
msgid ""
"If you want to use <emphasis role=\"strong\">curl</emphasis> to reset "
"<emphasis role=\"strong\">root</emphasis> or <emphasis "
"role=\"strong\">Administrator</emphasis>, here's how you can do it:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3792(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -s -X POST -H \"X-Auth-Token:999888777666\" -d '{\"changePassword\": {\"adminPass\": \"dontusesshhhforpassword\"}}' http://localhost:8774/v1.1/openstack/servers/3/action\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3797(title)
msgid "Changing Root (Administrator) Password Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3798(para)
msgid ""
"If you want to delete a server using Python, here's how it can be done:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3802(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Get the list of server IP addresses for a specific network\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"srvID = 1               # server ID number\n"
"passStr = \"dontusesshhhforpassword\"\n"
"\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"changePassword\": {\"adminPass\": passStr}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"POST\", \"%s/servers/%s/action\" % (apiurlt[2], srvID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3846(title)
msgid "Rebooting Servers"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3847(para)
msgid ""
"One of the most common administrative tasks is server reboot. You can log "
"into a server as <emphasis role=\"strong\">root</emphasis> (<emphasis "
"role=\"strong\">Administrator</emphasis>) and use the <emphasis "
"role=\"strong\">shutdown</emphasis> command:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3854(screen)
#, no-wrap
msgid ""
"\n"
"# shutdown -r now\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3857(para)
msgid ""
"But what if you cannot log into the server or when you have a couple of "
"dozens of servers to reboot? The answer is a POST request directed at "
"<emphasis>/servers/id/action</emphasis>, where <emphasis "
"role=\"strong\">id</emphasis> is the numeric server ID. You also need to "
"include a payload with the description of the action you want to perform on "
"your server (<emphasis role=\"strong\">reboot</emphasis>), the parameters of"
" those actions, and their values. It has to be a JSON string:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3867(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"reboot\" : {\n"
"    \"type\" : \"HARD\"\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3874(para)
msgid "There are two types of reboot:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3879(para)
msgid ""
"<emphasis role=\"strong\">HARD</emphasis> — the equivalent of turning power "
"off and on again."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3885(para)
msgid ""
"<emphasis role=\"strong\">SOFT</emphasis> — a gentle kind of reboot, think "
"<emphasis role=\"strong\">shutdown -r now</emphasis>."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3892(para)
msgid ""
"If you want to use <emphasis role=\"strong\">curl</emphasis> to reboot a "
"server, you can do it in the following way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3896(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -s -X POST -H \"X-Auth-Token:999888777666\" -d '{\"reboot\": {\"type\": \"HARD\"}}' http://localhost:8774/v1.1/openstack/servers/3/action\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3901(title)
msgid "Rebooting Servers Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3902(para)
msgid ""
"If you want to reboot a server using Python, here's how it can be done:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3906(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Get the list of server IP addresses for a specific network\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"srvID = 1       # server ID number\n"
"rebootType = \"HARD\" # can be either \"SOFT\" or \"HARD\"\n"
"\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"reboot\": {\"type\": rebootType}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"POST\", \"%s/servers/%s/action\" % (apiurlt[2], srvID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3950(title)
msgid "Rebuilding Servers"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3951(para)
msgid ""
"When things go wrong, e.g. you log in as <emphasis "
"role=\"strong\">root</emphasis> and overwrite <emphasis>/bin</emphasis>, you"
" can simply rebuild the server. This operation will delete all data and "
"install a fresh copy of the operating system, which does not have to be the "
"system you used to create the original server. What you get after rebuilding"
" a server is a new machine with the old machine's reference URL and IP "
"addresses."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3961(para)
msgid ""
"The POST request sent to <emphasis>/servers/id/action</emphasis> should "
"carry a JSON payload that includes the <emphasis "
"role=\"strong\">rebuild</emphasis> command, server image reference, name, "
"<emphasis role=\"strong\">root</emphasis>/(<emphasis "
"role=\"strong\">Administration</emphasis>) password, server metadata, and "
"personalization files. The <emphasis role=\"strong\">id</emphasis> is the "
"numeric ID of the server you want to renuild."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3971(para)
msgid ""
"You do not need to provide the flavor reference, because the virtual "
"hardware your rebuilt server will run on does not change. If you want to "
"alter that, rebuild your server and resize it afterwards (see the next "
"section)."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3977(para)
msgid ""
"The following script demonstrates how to rebuild a server using Python. I "
"skipped the metadata and personalization setup for clarity, but you can find"
" out how to use it if you read earlier sections on that subject."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml3983(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Get server image reference\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode({})\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"GET\", \"%s/images\" % apiurlt[2], params2, headers2)\n"
"\n"
"# HTTP response\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
"\n"
"###\n"
"### Server parameters\n"
"###\n"
"\n"
"# Server name\n"
"\n"
"sname = \"tornado001\"\n"
"\n"
"# Server image URL\n"
"\n"
"n = len(dd2[\"images\"])\n"
"m = range(n)\n"
"\n"
"for i in m:\n"
"    if dd2[\"images\"][i][\"id\"] == 1:\n"
"        sImageRef = dd2[\"images\"][i][\"links\"][0][\"href\"]\n"
"\n"
"###\n"
"### server metadata\n"
"###\n"
"\n"
"sMetadata = {}\n"
"\n"
"###\n"
"### server personalization\n"
"###\n"
"\n"
"sPersonalityPath = \"\"\n"
"sPersonalityContents = \"\"\n"
"sPersonality = [ { \"path\":sPersonalityPath, \"contents\":base64.b64encode( sPersonalityContents ) } ]\n"
"\n"
"s = { \"rebuild\": { \"name\": sname, \"imageRef\": sImageRef, \"metadata\": sMetadata, \"personality\": sPersonality } }\n"
"\n"
"sj = json.dumps(s)\n"
"\n"
"# HTTP connection #3\n"
"\n"
"params3 = sj\n"
"headers3 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"conn3 = httplib.HTTPConnection(\"localhost:8774\")\n"
"conn3.request(\"POST\", \"%s/servers\" % apiurlt[2], params3, headers3)\n"
"\n"
"# HTTP response #3\n"
"\n"
"response3 = conn3.getresponse()\n"
"data3 = response3.read()\n"
"dd3 = json.loads(data3)\n"
"\n"
"conn3.close()\n"
"\n"
"print json.dumps(dd3, indent=2)\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4079(title)
msgid "Resizing Servers"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4080(para)
msgid ""
"When you need more memory or more storage space (or both), you can resize "
"the virtual hardware your server runs on."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4084(para)
msgid ""
"The POST request sent to <emphasis>/servers/id/action</emphasis> must carry "
"a simple JSON payload with the name of the operation, <emphasis "
"role=\"strong\">resize</emphasis>, and the new server flavor URL like the "
"one below (it points to the server flavor number 5):"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4091(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"resize\": {\n"
"    \"flavorRef\": \"http://localhost:8774/v1.1/openstack/flavors/5\"\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4098(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4214(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4291(para)
msgid ""
"If you want to use <emphasis role=\"strong\">curl</emphasis>, the server "
"resize request would look like this:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4102(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -s -X POST -H \"X-Auth-Token:999888777666\" -d '{\"resize\": {\"flavorRef\": \"http://localhost:8774/v1.1/openstack/flavors/5\"}}' http://localhost:8774/v1.1/openstack/servers/3/action\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4105(para)
msgid ""
"It is possible to resize your server down, but it is up to you to make sure "
"that your data fits on the new, smaller disks."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4111(title)
msgid "Resizing Servers Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4112(para)
msgid ""
"The following example shows how to resize a server using Python. It looks "
"more complex than the <emphasis role=\"strong\">curl</emphasis> example, but"
" that's only because it also shows how to exrtact the flavor URL:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4118(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Resize a server\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"srvID = 1       # server ID number\n"
"flavorID = 3        # flavor ID number\n"
"\n"
"url2 = apiurlt[1]\n"
"\n"
"# Flavor URL\n"
"\n"
"# HTTP connection #2\n"
"\n"
"params2 = urllib.urlencode({})\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"GET\", \"%s/flavors\" % apiurlt[2], params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"dd2 = json.loads(data2)\n"
"\n"
"conn2.close()\n"
"\n"
"n = len(dd2[\"flavors\"])\n"
"m = range(n)\n"
"\n"
"for i in m:\n"
"    if dd2[\"flavors\"][i][\"id\"] == flavorID:\n"
"        sFlavorRef = dd2[\"flavors\"][i][\"links\"][0][\"href\"]\n"
"\n"
"# HTTP connection #3\n"
"\n"
"params3 = urllib.urlencode(json.dumps({\"resize\": {\"flavorRef\": sFlavorRef}}))\n"
"headers3 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn3 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn3 = httplib.HTTPConnection(url2)\n"
"\n"
"conn3.request(\"POST\", \"%s/servers/%s/action\" % (apiurlt[2], srvID), params3, headers3)\n"
"\n"
"# HTTP response #3\n"
"\n"
"response3 = conn3.getresponse()\n"
"data3 = response3.read()\n"
"conn3.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4194(title)
msgid "Confirming Server Resize"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4195(para)
msgid ""
"The OpenStack Compute cloud will wait for 24 hours before making changes "
"permanent. This gives you a chance to test things and go back to the old "
"flavor if needed. It is up to you if you want to confirm the resize, the "
"OpenStack Compute cloud will do it anyway after 24 hours, but if you are "
"happy, you can do it by sending a POST request to "
"<emphasis>/servers/id/action</emphasis>. The <emphasis "
"role=\"strong\">id</emphasis> parameter is the numeric ID of the server you "
"resized."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4206(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4283(para)
msgid "Don't forget the JSON payload:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4209(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"confirmResize\": null\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4218(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -s -X POST -H \"X-Auth-Token:999888777666\" -d '{\"confirmResize\": null}' http://localhost:8774/v1.1/openstack/servers/3/action\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4223(title)
msgid "Confirming Server Resize Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4224(para)
msgid ""
"If you want to use Python to confirm server resize, use this as your "
"inspiration:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4228(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Confirm server resize\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"srvID = 1       # server ID number\n"
"\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"confirmResize\": null}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"POST\", \"%s/servers/%s/action\" % (apiurlt[2], srvID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4271(title)
msgid "Reverting Server Resize"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4272(para)
msgid ""
"If you are not happy with your reszied server, you can revert to the old "
"flavor using the <emphasis role=\"strong\">revertResize</emphasis> command."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4277(para)
msgid ""
"You can do it by sending a POST request to "
"<emphasis>/servers/id/action</emphasis>. The <emphasis "
"role=\"strong\">id</emphasis> parameter is the numeric ID of the server you "
"resized."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4286(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"revertResize\": null\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4295(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -s -X POST -H \"X-Auth-Token:999888777666\" -d '{\"revertResize\": null}' http://localhost:8774/v1.1/openstack/servers/3/action\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4300(title)
msgid "Reverting Server Resize Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4301(para)
msgid ""
"If you want to use Python to revert server resize, use this as your "
"inspiration:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4305(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Revert server resize\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"srvID = 1       # server ID number\n"
"\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"revertResize\": null}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"POST\", \"%s/servers/%s/action\" % (apiurlt[2], srvID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4349(title)
msgid "Server Images"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4350(para)
msgid ""
"Servers can be created using default templates, but you can also create your"
" own server images that will be later reused to quickly replicate your "
"working setup. Server images preserve the customiztions and the data from "
"the original server. This allows you to pre-load one server with data and "
"replicate it to divide the data processing job between as many machines as "
"you need."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4359(title)
msgid "Creating Server Images"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4360(para)
msgid ""
"The server image creation operation is quite simple, all you need to do is "
"send a POST request to <emphasis>/servers/id/action</emphasis>. The "
"<emphasis role=\"strong\">id</emphasis> is the numeric ID of the server that"
" you want to preserve."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4367(para)
msgid ""
"The JSON payload that accompanies the <emphasis "
"role=\"strong\">createImage</emphasis> command must include the name of the "
"server image and optional metadata. That metadata is independent of the "
"server metadata."
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4373(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"createImage\": {\n"
"    \"name\": \"tornado-app-server\",\n"
"    \"metadata\": {\n"
"      \"version\": \"1.0.0\",\n"
"      \"creator\": \"joe\"\n"
"    }\n"
"      }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4384(para)
msgid ""
"If you want to use <emphasis role=\"strong\">curl</emphasis>, the server "
"image creation request would look like this:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4388(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -s -X POST -H \"X-Auth-Token:999888777666\" -d '{\"createImage\": {\"name\": \"tornado-app-server\", \"metadata\": {\"version\": \"1.0.0\", \"creator\": \"joe\"}}}' http://localhost:8774/v1.1/openstack/servers/3/action\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4393(title)
msgid "Creating Server Images Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4394(para)
msgid ""
"If you want to use Python to to create a server image, use this as your "
"inspiration:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4398(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Revert server resize\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"srvID = 1               # server ID number\n"
"imgName = \"tornado-app-server\"\n"
"metaDict = {\"version\": \"1.0.0\", \"creator\": \"joe\"}\n"
"\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode(json.dumps({\"createImage\": {\"name\": imgName, \"metadata\": metaDict}}))\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"POST\", \"%s/servers/%s/action\" % (apiurlt[2], srvID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4443(title)
msgid "Deleting Servers"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4444(para)
msgid ""
"When a server is no longer necessary you can simply delete it. One REST call"
" and the server is gone. You will need to add the server <emphasis "
"role=\"strong\">id</emphasis> number after <emphasis>/servers</emphasis> and"
" you must use the DELETE method, as in:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4451(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -s -X DELETE -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/servers/3\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4454(para)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4527(para)
msgid ""
"The OpenStack Compute API server will not return a JSON object when the "
"operation is successful, but it will return an error message when the server"
" you are trying to delete does not exist:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4459(screen)
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4532(screen)
#, no-wrap
msgid ""
"\n"
"{\n"
"  \"itemNotFound\": {\n"
"    \"message\": \"The resource could not be found.\", \n"
"    \"code\": 404\n"
"  }\n"
"}\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4469(title)
msgid "Deleting Servers Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4470(para)
msgid ""
"When you use Python, server deletion procedure can be done in a fairly "
"simple way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4474(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Get the list of server IP addresses for a specific network\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"srvID = 1       # server ID number\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode({})\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"GET\", \"%s/servers/%s/delete\" % (apiurlt[2], srvID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4516(title)
msgid "Deleting Server Images"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4517(para)
msgid ""
"When a server image is no longer necessary you can get rid of it. You will "
"need to send a DELETE request to <emphasis>/servers/id</emphasis>, where "
"<emphasis role=\"strong\">id</emphasis> is the numeric ID of the server "
"image you want to remove:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4524(screen)
#, no-wrap
msgid ""
"\n"
"$ curl -s -X DELETE -H \"X-Auth-Token:999888777666\" http://localhost:8774/v1.1/openstack/images/3\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4542(title)
msgid "Deleting Servers Images Using Python"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4543(para)
msgid ""
"When you use Python, server image deletion procedure can be done in a fairly"
" simple way:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4547(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import base64\n"
"import urllib\n"
"import httplib\n"
"import json\n"
"import os\n"
"from urlparse import urlparse\n"
"\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"###\n"
"###  insert the 'Get OpenStack Credentials' snippet here\n"
"###\n"
"### --8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--8&lt;--\n"
"\n"
"###\n"
"### Delete server image\n"
"###\n"
"\n"
"# HTTP connection #2\n"
"\n"
"srvID = 1       # server ID number\n"
"url2 = apiurlt[1]\n"
"params2 = urllib.urlencode({})\n"
"headers2 = { \"X-Auth-Token\":apitoken, \"Content-type\":\"application/json\" }\n"
"\n"
"if (usehttps == True):\n"
"    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')\n"
"else:\n"
"    conn2 = httplib.HTTPConnection(url2)\n"
"\n"
"conn2.request(\"DELETE\", \"%s/images/%s\" % (apiurlt[2], srvID), params2, headers2)\n"
"\n"
"# HTTP response #2\n"
"\n"
"response2 = conn2.getresponse()\n"
"data2 = response2.read()\n"
"conn2.close()\n"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4590(title)
msgid "Additional Tools"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4591(para)
msgid ""
"A while ago I wrote a simple tool for pretty-printing JSON data. Over time I"
" found it handy to have around when working with various applications and "
"services that generate JSON output. You might find it handy when you are "
"working with JSON. Here it is:"
msgstr ""

#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml4597(screen)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/python\n"
"\n"
"import sys\n"
"import json\n"
"\n"
"def main():\n"
"\n"
"        try:\n"
"\n"
"                data = sys.stdin.readline()\n"
"                dd = json.loads(data)\n"
"\n"
"        except:\n"
"\n"
"                sys.stderr.write(\"Error: %s\" % str(sys.exc_info()[0]))\n"
"                sys.stderr.write(\"\\nI got no data, badly formatted JSON, or something that is not JSON.\")\n"
"\n"
"                sys.exit()\n"
"\n"
"        print json.dumps(dd, indent=2)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: /home/daisy/OpenStack/openstack-manuals-i18n/doc/src/docbkx/openstack-api-programming/openstackapi-programming.xml0(None)
msgid "translator-credits"
msgstr ""
